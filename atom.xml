<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知其然，知其所以然</title>
  
  <subtitle>知识广度是深度的副产品</subtitle>
  <link href="http://diudiu6.com/atom.xml" rel="self"/>
  
  <link href="http://diudiu6.com/"/>
  <updated>2020-08-26T08:17:35.000Z</updated>
  <id>http://diudiu6.com/</id>
  
  <author>
    <name>Quzard</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题 08.09. 括号</title>
    <link href="http://diudiu6.com/2020/08/26/%E9%9D%A2%E8%AF%95%E9%A2%98-08-09-%E6%8B%AC%E5%8F%B7/"/>
    <id>http://diudiu6.com/2020/08/26/%E9%9D%A2%E8%AF%95%E9%A2%98-08-09-%E6%8B%AC%E5%8F%B7/</id>
    <published>2020-08-26T08:05:13.000Z</published>
    <updated>2020-08-26T08:17:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难度（中等）"><a href="#难度（中等）" class="headerlink" title="难度（中等）"></a>难度（中等）</h2><p>括号。设计一种算法，打印n对括号的所有合法的（例如，开闭一一对应）组合。</p><p>说明：解集不能包含重复的子集。</p><p>例如，给出 n = 3，生成结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&quot;((()))&quot;</span>,</span><br><span class="line">  <span class="string">&quot;(()())&quot;</span>,</span><br><span class="line">  <span class="string">&quot;(())()&quot;</span>,</span><br><span class="line">  <span class="string">&quot;()(())&quot;</span>,</span><br><span class="line">  <span class="string">&quot;()()()&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><p>因为括号一定左括号先出<br>所以 只允许出现 <code>l == r</code> 与 <code>l &lt; r </code>的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      dfs(n, n, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">string</span> le)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(l ==<span class="number">0</span> &amp;&amp; r == <span class="number">0</span>)&#123;</span><br><span class="line">         res.push_back(le);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(l != <span class="number">0</span>) dfs(l - <span class="number">1</span>, r, le + <span class="string">&quot;(&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(l &lt; r) dfs(l, r - <span class="number">1</span>, le + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;难度（中等）&quot;&gt;&lt;a href=&quot;#难度（中等）&quot; class=&quot;headerlink&quot; title=&quot;难度（中等）&quot;&gt;&lt;/a&gt;难度（中等）&lt;/h2&gt;&lt;p&gt;括号。设计一种算法，打印n对括号的所有合法的（例如，开闭一一对应）组合。&lt;/p&gt;
&lt;p&gt;说明：解集不能包含重复的子集。&lt;/p&gt;
&lt;p&gt;例如，给出 n = 3，生成结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;((()))&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;(()())&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;(())()&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;()(())&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;()()()&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/categories/LeetCode/"/>
    
    <category term="Medium" scheme="http://diudiu6.com/categories/LeetCode/Medium/"/>
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/tags/LeetCode/"/>
    
    <category term="深度优先搜索 DFS" scheme="http://diudiu6.com/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/"/>
    
    <category term="回溯" scheme="http://diudiu6.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>面试题 08.07. 无重复字符串的排列组合</title>
    <link href="http://diudiu6.com/2020/08/26/%E9%9D%A2%E8%AF%95%E9%A2%98-08-07-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    <id>http://diudiu6.com/2020/08/26/%E9%9D%A2%E8%AF%95%E9%A2%98-08-07-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</id>
    <published>2020-08-26T07:38:21.000Z</published>
    <updated>2020-08-26T07:41:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难度（中等）"><a href="#难度（中等）" class="headerlink" title="难度（中等）"></a>难度（中等）</h2><p>无重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。</p><p><strong>示例1:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">S</span> = <span class="string">&quot;qwe&quot;</span></span><br><span class="line">输出：[<span class="string">&quot;qwe&quot;</span>, <span class="string">&quot;qew&quot;</span>, <span class="string">&quot;wqe&quot;</span>, <span class="string">&quot;weq&quot;</span>, <span class="string">&quot;ewq&quot;</span>, <span class="string">&quot;eqw&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>示例2:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">S</span> = <span class="string">&quot;ab&quot;</span></span><br><span class="line">输出：[<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ba&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ol><li>字符都是英文字母。</li><li>字符串长度在[1, 9]之间。</li></ol><a id="more"></a><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span></span><br><span class="line"><span class="class">public:</span></span><br><span class="line"><span class="class">    vector&lt;string&gt; permutation(<span class="title">string</span> <span class="type">S</span>) &#123;</span></span><br><span class="line"><span class="class">        vector&lt;string&gt; res;</span></span><br><span class="line"><span class="class">       dfs(<span class="type">S</span>, <span class="title">res</span>, 0);</span></span><br><span class="line"><span class="class">       return res;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    void dfs(<span class="title">string</span> <span class="type">S</span>, <span class="title">vector</span>&lt;<span class="title">string</span>&gt;&amp; <span class="title">res</span>,<span class="title">int</span> <span class="title">index</span>)&#123;</span></span><br><span class="line"><span class="class">       if(<span class="title">index</span> == <span class="type">S</span>.<span class="title">length</span>())&#123;</span></span><br><span class="line"><span class="class">          res.push_back(<span class="type">S</span>);</span></span><br><span class="line"><span class="class">       &#125; else&#123;</span></span><br><span class="line"><span class="class">          for(<span class="title">int</span> <span class="title">i</span> = <span class="title">index</span>; <span class="title">i</span> &lt; <span class="type">S</span>.<span class="title">length</span>(); ++i)&#123;</span></span><br><span class="line"><span class="class">             swap(<span class="type">S</span>[<span class="title">index</span>], <span class="type">S</span>[<span class="title">i</span>]);</span></span><br><span class="line"><span class="class">             dfs(<span class="type">S</span>, <span class="title">res</span>, <span class="title">index</span> + 1);</span></span><br><span class="line"><span class="class">             swap(<span class="type">S</span>[<span class="title">index</span>], <span class="type">S</span>[<span class="title">i</span>]);</span></span><br><span class="line"><span class="class">          &#125;</span></span><br><span class="line"><span class="class">       &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;难度（中等）&quot;&gt;&lt;a href=&quot;#难度（中等）&quot; class=&quot;headerlink&quot; title=&quot;难度（中等）&quot;&gt;&lt;/a&gt;难度（中等）&lt;/h2&gt;&lt;p&gt;无重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;attr&quot;&gt;S&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;qwe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;string&quot;&gt;&amp;quot;qwe&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;qew&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;wqe&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;weq&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ewq&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;eqw&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;示例2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;attr&quot;&gt;S&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;string&quot;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ba&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符都是英文字母。&lt;/li&gt;
&lt;li&gt;字符串长度在[1, 9]之间。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/categories/LeetCode/"/>
    
    <category term="Medium" scheme="http://diudiu6.com/categories/LeetCode/Medium/"/>
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/tags/LeetCode/"/>
    
    <category term="深度优先搜索 DFS" scheme="http://diudiu6.com/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/"/>
    
    <category term="回溯" scheme="http://diudiu6.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>3. 无重复字符的最长子串</title>
    <link href="http://diudiu6.com/2020/08/26/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://diudiu6.com/2020/08/26/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</id>
    <published>2020-08-26T06:39:12.000Z</published>
    <updated>2020-08-26T06:45:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难度（中等）"><a href="#难度（中等）" class="headerlink" title="难度（中等）"></a>难度（中等）</h2><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: &quot;abcabcbb&quot;</span></span><br><span class="line"><span class="section">输出: 3 </span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: &quot;bbbbb&quot;</span></span><br><span class="line"><span class="section">输出: 1</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span></span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: &quot;pwwkew&quot;</span></span><br><span class="line"><span class="section">输出: 3</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">&quot;pwke&quot;</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;难度（中等）&quot;&gt;&lt;a href=&quot;#难度（中等）&quot; class=&quot;headerlink&quot; title=&quot;难度（中等）&quot;&gt;&lt;/a&gt;难度（中等）&lt;/h2&gt;&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 &lt;strong&gt;最长子串&lt;/strong&gt; 的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;输入: &amp;quot;abcabcbb&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;输出: 3 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;解释: 因为无重复字符的最长子串是 &amp;quot;abc&amp;quot;，所以其长度为 3。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;输入: &amp;quot;bbbbb&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;输出: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;解释: 因为无重复字符的最长子串是 &amp;quot;b&amp;quot;，所以其长度为 1。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;输入: &amp;quot;pwwkew&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;输出: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;解释: 因为无重复字符的最长子串是 &amp;quot;wke&amp;quot;，所以其长度为 3。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     请注意，你的答案必须是 子串 的长度，&lt;span class=&quot;string&quot;&gt;&amp;quot;pwke&amp;quot;&lt;/span&gt; 是一个子序列，不是子串。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/categories/LeetCode/"/>
    
    <category term="Medium" scheme="http://diudiu6.com/categories/LeetCode/Medium/"/>
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2. 两数相加</title>
    <link href="http://diudiu6.com/2020/08/26/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://diudiu6.com/2020/08/26/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2020-08-26T05:17:23.000Z</published>
    <updated>2020-08-26T06:45:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难度（中等）"><a href="#难度（中等）" class="headerlink" title="难度（中等）"></a>难度（中等）</h2><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">输出：<span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">原因：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">auto</span>* res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> plus = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">bool</span> FIRST = <span class="number">0</span>;</span><br><span class="line">      ListNode* current = res;</span><br><span class="line">      <span class="keyword">while</span> (l1 || l2)&#123;</span><br><span class="line">         <span class="keyword">int</span> x = (l1) ? l1 -&gt; val : <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">int</span> y = (l2) ? l2 -&gt; val : <span class="number">0</span>;</span><br><span class="line">         sum = x + y + plus;</span><br><span class="line">         plus = sum / <span class="number">10</span>;</span><br><span class="line">         current-&gt; next =  <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">         current = current -&gt;next;</span><br><span class="line">         <span class="keyword">if</span>(l1) l1 = l1 -&gt; next;</span><br><span class="line">         <span class="keyword">if</span>(l2) l2 = l2 -&gt; next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(plus)</span><br><span class="line">         current-&gt; next =  <span class="keyword">new</span> ListNode(plus % <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">if</span>(res)&#123;</span><br><span class="line">         current = res;</span><br><span class="line">         res = current -&gt; next;</span><br><span class="line">         <span class="keyword">delete</span> current;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;难度（中等）&quot;&gt;&lt;a href=&quot;#难度（中等）&quot; class=&quot;headerlink&quot; title=&quot;难度（中等）&quot;&gt;&lt;/a&gt;难度（中等）&lt;/h2&gt;&lt;p&gt;给出两个 &lt;strong&gt;非空&lt;/strong&gt; 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 &lt;strong&gt;逆序&lt;/strong&gt; 的方式存储的，并且它们的每个节点只能存储 &lt;strong&gt;一位&lt;/strong&gt; 数字。&lt;/p&gt;
&lt;p&gt;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;/p&gt;
&lt;p&gt;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + (&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原因：&lt;span class=&quot;number&quot;&gt;342&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;465&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;807&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/categories/LeetCode/"/>
    
    <category term="Medium" scheme="http://diudiu6.com/categories/LeetCode/Medium/"/>
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/tags/LeetCode/"/>
    
    <category term="初等数学" scheme="http://diudiu6.com/tags/%E5%88%9D%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>17. 电话号码的字母组合</title>
    <link href="http://diudiu6.com/2020/08/26/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>http://diudiu6.com/2020/08/26/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</id>
    <published>2020-08-26T01:53:58.000Z</published>
    <updated>2020-08-26T07:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难度（中等）"><a href="#难度（中等）" class="headerlink" title="难度（中等）"></a>难度（中等）</h2><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><img src="/2020/08/26/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/17_telephone_keypad.png" class="" title="17_telephone_keypad"><p><strong>示例:</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="string">&quot;23&quot;</span></span><br><span class="line">输出：[<span class="string">&quot;ad&quot;</span>, <span class="string">&quot;ae&quot;</span>, <span class="string">&quot;af&quot;</span>, <span class="string">&quot;bd&quot;</span>, <span class="string">&quot;be&quot;</span>, <span class="string">&quot;bf&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;ce&quot;</span>, <span class="string">&quot;cf&quot;</span>].</span><br></pre></td></tr></table></figure><p><strong>说明:</strong><br>尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p><a id="more"></a><h1 id="用哈希表-代替-switch"><a href="#用哈希表-代替-switch" class="headerlink" title="用哈希表 代替 switch"></a><strong>用哈希表 代替 switch</strong></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; phoneMap&#123;</span><br><span class="line">      &#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="xiao-ben-zhu-对回溯的理解"><a href="#xiao-ben-zhu-对回溯的理解" class="headerlink" title="xiao_ben_zhu 对回溯的理解"></a><strong>xiao_ben_zhu 对回溯的理解</strong></h1><p>回溯本质是暴力搜索，在问题的解空间树中，用 DFS 的方式，从根节点出发搜索整个解空间。</p><p>如果要找出所有的解，则要搜索整个子树，如果只用找出一个解，则搜到一个解就可以结束搜索。</p><p>类似「找出所有可能的组合」的问题，适合回溯算法。</p><p>做回溯类题目，要明确三个关键点：</p><p>选择<br>决定了你每个节点有哪些分支，可以帮助你构建出解的空间树。<br>约束条件<br>用来剪枝，剪去不满足约束条件的子树，避免无效的搜索。<br>目标<br>决定了你何时捕获解，或者剪去得不到解的子树，提前回溯。</p><p>作者：xiao_ben_zhu<br>链接：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/shou-hua-tu-jie-liang-chong-jie-fa-dfshui-su-bfsya/">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/shou-hua-tu-jie-liang-chong-jie-fa-dfshui-su-bfsya/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCombinations</span><span class="params">(<span class="built_in">string</span> digits)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; combinations;</span><br><span class="line">      <span class="keyword">if</span> (digits.empty())</span><br><span class="line">         <span class="keyword">return</span> combinations;</span><br><span class="line">      <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; phoneMap&#123;</span><br><span class="line">            &#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">string</span> combination;</span><br><span class="line">      dfs(combinations, phoneMap, digits, combination, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> combinations;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; combinations, <span class="keyword">const</span> <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;&amp; phoneMap,<span class="keyword">const</span> <span class="built_in">string</span>&amp; digits, <span class="built_in">string</span>&amp; combination, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(index == digits.length())&#123;</span><br><span class="line">         combinations.push_back(combination);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">string</span> words = phoneMap.at(digits[index]);</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">word</span>:words)&#123;</span><br><span class="line">            combination.push_back(<span class="keyword">word</span>);</span><br><span class="line">            dfs(combinations, phoneMap, digits, combination, index + <span class="number">1</span>);</span><br><span class="line">            combination.pop_back();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;难度（中等）&quot;&gt;&lt;a href=&quot;#难度（中等）&quot; class=&quot;headerlink&quot; title=&quot;难度（中等）&quot;&gt;&lt;/a&gt;难度（中等）&lt;/h2&gt;&lt;p&gt;给定一个仅包含数字 &lt;code&gt;2-9&lt;/code&gt; 的字符串，返回所有它能表示的字母组合。&lt;/p&gt;
&lt;p&gt;给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&lt;/p&gt;
&lt;img src=&quot;/2020/08/26/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/17_telephone_keypad.png&quot; class=&quot;&quot; title=&quot;17_telephone_keypad&quot;&gt;

&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;string&quot;&gt;&amp;quot;23&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;string&quot;&gt;&amp;quot;ad&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ae&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;af&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;bd&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;be&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;bf&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;cd&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ce&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;cf&amp;quot;&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;br&gt;尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/categories/LeetCode/"/>
    
    <category term="Medium" scheme="http://diudiu6.com/categories/LeetCode/Medium/"/>
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/tags/LeetCode/"/>
    
    <category term="hash" scheme="http://diudiu6.com/tags/hash/"/>
    
    <category term="深度优先搜索 DFS" scheme="http://diudiu6.com/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/"/>
    
    <category term="回溯" scheme="http://diudiu6.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>111. 二叉树的最小深度</title>
    <link href="http://diudiu6.com/2020/08/21/111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
    <id>http://diudiu6.com/2020/08/21/111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</id>
    <published>2020-08-21T09:21:10.000Z</published>
    <updated>2020-08-26T06:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难度（简单）"><a href="#难度（简单）" class="headerlink" title="难度（简单）"></a>难度（简单）</h2><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例:</strong></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><p>返回它的最小深度  2.</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> min_depth = INT_MAX;</span><br><span class="line">      <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">         min_depth = <span class="built_in">min</span>(minDepth(root-&gt;left), min_depth);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (root-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">         min_depth = <span class="built_in">min</span>(minDepth(root-&gt;right), min_depth);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> min_depth + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;TreeNode *, <span class="keyword">int</span>&gt; &gt; que;</span><br><span class="line">      que.emplace(root, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">         TreeNode *node = que.front().first;</span><br><span class="line">         <span class="keyword">int</span> depth = que.front().second;</span><br><span class="line">         que.pop();</span><br><span class="line">         <span class="keyword">if</span> (node-&gt;left == <span class="literal">nullptr</span> &amp;&amp; node-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> depth;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (node-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            que.emplace(node-&gt;left, depth + <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (node-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            que.emplace(node-&gt;right, depth + <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;难度（简单）&quot;&gt;&lt;a href=&quot;#难度（简单）&quot; class=&quot;headerlink&quot; title=&quot;难度（简单）&quot;&gt;&lt;/a&gt;难度（简单）&lt;/h2&gt;&lt;p&gt;给定一个二叉树，找出其最小深度。&lt;/p&gt;
&lt;p&gt;最小深度是从根节点到最近叶子节点的最短路径上的节点数量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt; 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定二叉树 &lt;code&gt;[3,9,20,null,null,15,7]&lt;/code&gt;,&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回它的最小深度  2.&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/categories/LeetCode/"/>
    
    <category term="Easy" scheme="http://diudiu6.com/categories/LeetCode/Easy/"/>
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/tags/LeetCode/"/>
    
    <category term="递归" scheme="http://diudiu6.com/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="深度优先搜索 DFS" scheme="http://diudiu6.com/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/"/>
    
    <category term="广度优先搜索 BFS" scheme="http://diudiu6.com/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-BFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——1. 两数之和</title>
    <link href="http://diudiu6.com/2020/08/20/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://diudiu6.com/2020/08/20/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2020-08-20T03:36:26.000Z</published>
    <updated>2020-08-26T06:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难度（简单）"><a href="#难度（简单）" class="headerlink" title="难度（简单）"></a>难度（简单）</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><strong>示例:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p>该题可用hash表  unordered_map 来解决</p><p>以 i 从头遍历 nums，每次判断 target - nums[i]是否在 unordered_map 中，若无则将 nums[i] 加入unordered_map，并将其与坐标i匹配</p><p>遍历直到找到答案才结束</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">      <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span> <span class="params">(<span class="number">-1</span>,<span class="number">-1</span>)</span></span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>.count(target - nums[i]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">          res[<span class="number">0</span>] = <span class="built_in">map</span>[target - nums[i]];</span><br><span class="line">          res[<span class="number">1</span>] = i;</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>[nums[i]] = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;难度（简单）&quot;&gt;&lt;a href=&quot;#难度（简单）&quot; class=&quot;headerlink&quot; title=&quot;难度（简单）&quot;&gt;&lt;/a&gt;难度（简单）&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定 nums = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;], target = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为 nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + nums[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以返回 [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/categories/LeetCode/"/>
    
    <category term="Easy" scheme="http://diudiu6.com/categories/LeetCode/Easy/"/>
    
    
    <category term="LeetCode" scheme="http://diudiu6.com/tags/LeetCode/"/>
    
    <category term="hash" scheme="http://diudiu6.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>类继承</title>
    <link href="http://diudiu6.com/2020/05/09/%E7%B1%BB%E7%BB%A7%E6%89%BF/"/>
    <id>http://diudiu6.com/2020/05/09/%E7%B1%BB%E7%BB%A7%E6%89%BF/</id>
    <published>2020-05-09T07:18:30.000Z</published>
    <updated>2020-05-09T12:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h1><ul><li>本章内容包括：<ul><li>is-a 关系的继承。</li><li>如何以公有方式从一个类派生出另一个类。</li><li>保护访问。</li><li>构造函数成员初始化列表。</li><li>向上和向下强制转换。</li><li>虚成员函数。</li><li>早期（静态）联编与晚期（动态）联编。</li><li>抽象基类。</li><li>纯虚函数。</li><li>何时及如何使用公有继承。</li></ul></li></ul><a id="more"></a><p>类继承——它能够从已有的类派生出新的类，而派生类继承了原有类（称为基类）的特征，包括方法。</p><ul><li>可以在原有类的基础上添加功能。例如，对于数组类，可以添加数学运算。</li><li>可以给类添加数据。例如，对于字符串类可以派生出一个类，并添加指定字符串显示颜色的数据成员。</li><li>可以修改类方法的行为。例如，对于代表提供给飞机乘客的服务的passenger类，可以派生出提供给头等舱服务的FirstPassenger类。</li></ul><h2 id="13-1-一个简单的基类"><a href="#13-1-一个简单的基类" class="headerlink" title="13.1 一个简单的基类"></a>13.1 一个简单的基类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableTennisPlayer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> firstname;</span><br><span class="line">    <span class="built_in">string</span> lastname;</span><br><span class="line">    <span class="keyword">bool</span> hasTable;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TableTennisPlayer (<span class="keyword">const</span> <span class="built_in">string</span> &amp; fn = <span class="string">&quot;none&quot;</span>,</span><br><span class="line">                       <span class="keyword">const</span> <span class="built_in">string</span> &amp; ln = <span class="string">&quot;none&quot;</span>, <span class="keyword">bool</span> ht = <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这将首先为firstname调用string的默认构造函数，再调用string的赋值运算符将firstname设置为fn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">TableTennisPlayer::TableTennisPlayer (<span class="keyword">const</span> <span class="built_in">string</span> &amp; fn, </span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> &amp; ln, <span class="keyword">bool</span> ht) &#123;</span><br><span class="line">            firstname = fn;</span><br><span class="line">            lastname = ln;</span><br><span class="line">            hasTable = ht;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*初始化列表语法</span></span><br><span class="line"><span class="comment">初始化列表语法可减少一个步骤，它直接使用string的复制构造函数将firstname 初始化为fn</span></span><br><span class="line"><span class="comment">TableTennisPlayer::TableTennisPlayer (const string &amp; fn, </span></span><br><span class="line"><span class="comment">    const string &amp; ln, bool ht) : firstname(fn),</span></span><br><span class="line"><span class="comment">        lastname(ln), hasTable(ht) &#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>给一个类派生出另一个类时，原始类称为基类，继承类成为派生类。</p><ul><li><p>公有派生(public)</p><p>派生类对象包含基类对象。使用公有派生，基类的公有成员将成为派生类的公有成员；基类的私有部分(private)也将成为派生类的一部分，但只能通过基类的公有和保护方法访问</p><ul><li>派生类对象<strong>存储了基类的数据成员</strong>（派生类继承了积累的实现）</li><li>派生类对象<strong>可以使用基类的方法</strong>（派生类继承了基类的接口）</li><li>派生类<strong>需要自己的构造函数</strong>。</li><li>派生类可以<strong>根据需要添加额外的数据成员和成员函数</strong>。</li><li>构造函数必须<strong>给新成员(如果有的话)和继承的成员提供数据</strong>。</li></ul></li></ul><h3 id="13-1-2构造函数：访问权限的考虑"><a href="#13-1-2构造函数：访问权限的考虑" class="headerlink" title="13.1.2构造函数：访问权限的考虑"></a>13.1.2构造函数：访问权限的考虑</h3><ul><li><p><strong>派生类不能直接访问基类的私有成员，而必须通过基类方法进行访问。</strong><br>派生类不能直接设置继承的成员，而必须使用基类的公有方法来访问私有的基类成员。具体地说，派生类构造函数必须使用基类构造函数。</p></li><li><p><strong>创建派生类对象时，程序首先创建基类对象。</strong></p><p>从概念上说，这意味着基类对象应当在程序进入派生类构造函数之前被创建。<strong>C+ +使用成员初始化列表语法来完成这种工作。</strong></p></li><li><p><strong>非构造函数不能使用成员初始化列表语法，但派生类方法可以调用公有的基类方法</strong></p><p>例如，派生类构造函数在初始化基类私有数据时，采用的是成员初始化列表语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RatedPlayer 继承于 TableTennisPlayer</span></span><br><span class="line"><span class="comment">// class RatedPlayer : public TableTennisPlayer</span></span><br><span class="line">RatedPlayer: : RatedPlayer (<span class="keyword">unsigned</span> <span class="keyword">int</span> r, <span class="keyword">const</span> <span class="built_in">string</span> &amp; fn, <span class="keyword">const</span> <span class="built_in">string</span> &amp; <span class="number">1</span>n, <span class="keyword">bool</span> ht) : TableTennisPlayer(fn， <span class="number">1</span>n, ht)</span><br><span class="line">&#123;</span><br><span class="line">    rating = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果省略成员初始化列表（不调用基类构造函数），程序将使用默认的基类构造函数</p></li><li><p>有关派生类构造函数的要点如下:</p><ul><li>首<strong>先创建基类对象</strong></li><li>派生类构造函数应通过成员初始化列表将基类信息传递给基类构造函数，<strong>根据继承顺序初始化，而不是初始化列表中的顺序</strong></li><li>派生类构造函数应初始化派生类新增的数据成员。<strong>根据声明顺序初始化，而不是初始化列表中的顺序</strong></li><li><strong>释放对象的顺序与创建对象的顺序相反</strong>，首先执行派生类的析构函数，然后自动调用基类的析构函数。</li></ul></li><li><p>派生类并不能直接访问基类的私有数据，必须使用基类的公有方法才能访问这些数据</p></li></ul><p>  再次总结</p><ol><li><p><strong>创建派生类对象时，程序首先调用基类构造函数</strong></p><p>基类构造函数负责初始化继承的数据成员</p></li><li><p><strong>然后再调用派生类构造函数。</strong></p><p>派生类构造函数主要用于初始化新增的数据成员。</p></li><li><p><strong>派生类的构造函数总是调用一个基类构造函数。</strong></p><p>可以使用初始化器列表语法指明要使用的基类构造函数，否则将使用默认的基类构<br>造函数。</p></li><li><p><strong>派生类对象过期时，程序将首先调用派生类析构函数，然后再调用基类析构函数。</strong></p></li></ol><ul><li>虛基类外(参见第14章)，类只能将值传递回相邻的基类，但后者可以使用相同的机制将信息传递给相邻的基类，依此类推。如果没有在成员初始化列表中提供基类构造函数，程序将使用默认的基类构造函数。成员初始化列表只能用于构造函数。</li></ul><h3 id="13-1-3派生类和基类之间的特殊关系"><a href="#13-1-3派生类和基类之间的特殊关系" class="headerlink" title="13.1.3派生类和基类之间的特殊关系"></a>13.1.3派生类和基类之间的特殊关系</h3><ul><li>派生类对象可以使用基类的方法，条件是不是私有的</li><li>基类指针可以在不进行显式类型转换的情况下指向派生类对象</li><li>基类引用可以在不进行显示类型转换的情况下引用派生类对象</li><li>基类指针或引用只能用于调用基类方法，因此,不能来调用派生类的方法。</li><li>不可以将基类对象和地址赋给派生类引用和指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;&#125;;</span><br><span class="line"><span class="function">B <span class="title">temp_1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">A <span class="title">temp_2</span><span class="params">(temp_1)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要初始化temp_2,匹配的构造函数的原型如下:</span></span><br><span class="line"><span class="comment">A (const B&amp;);</span></span><br><span class="line"><span class="comment">类定义中没有这样的构造函数，但存在隐式复制构造函数</span></span><br><span class="line"><span class="comment">A(const A&amp;);</span></span><br><span class="line"><span class="comment">形参是基类引用，因此他可以引用派生类</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="13-2继承：-is-a关系"><a href="#13-2继承：-is-a关系" class="headerlink" title="13.2继承： is-a关系"></a>13.2继承： is-a关系</h2><p>公有继承</p><h2 id="13-3多态公有继承"><a href="#13-3多态公有继承" class="headerlink" title="13.3多态公有继承"></a>13.3多态公有继承</h2><p>实现多态公有继承方法</p><ul><li>在派生类中重新定义基类的方法</li><li>使用虚方法virtual</li></ul><p>如果方法是通过引用或指针而不是对象调用的，它将确定使用哪一种方法。</p><ul><li><p>如果没有使用关键字virtual,程序将<strong>根据引用类型或指针类型</strong>选择方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A <span class="title">temp_1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">B <span class="title">temp_2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">A* P_1 = &amp; temp_1;</span><br><span class="line">P_1 -&gt; <span class="built_in">print</span>(); <span class="comment">// 调用 A::print()</span></span><br><span class="line">A* P_2 = &amp; temp_2;</span><br><span class="line">P_2 -&gt; <span class="built_in">print</span>(); <span class="comment">// 调用 A::print()</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用了virtual,程序将<strong>根据引用或指针指向的对象的类型</strong>来选择方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A <span class="title">temp_1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">B <span class="title">temp_2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">A* P_1 = &amp; temp_1;</span><br><span class="line">P_1 -&gt; <span class="built_in">print</span>(); <span class="comment">// 调用 A::print()</span></span><br><span class="line">A* P_2 = &amp; temp_2;</span><br><span class="line">P_2 -&gt; <span class="built_in">print</span>(); <span class="comment">// 调用 B::print()</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>方法在基类中被声明为虚的后，它在派生类中将自动成为虚方法</strong>。然而，在派生类声明中使用关<br>键字virual来指出哪此函数县虎函数也不失为一个好办法。（<strong>派生类不一定要加virtual，基类一定要；virtual只需要在原型中写出，但定义中不需要写，和friend一样</strong>）</p><p><strong>只要派生类的函数与基类的同原型（函数返回类型、函数名和形参列表），自动转为虚函数，不需要声明virtual，如果不同的话就叫作函数重载了；虚函数只能是类中成员函数且不能是静态，有隐藏的this指针</strong></p><ul><li><strong>基类声明虚析构函数。这样做是为了确保释放派生对象时，按正确的顺序调用析构函数。</strong><ul><li>使用delete释放由new分配的对象时，<strong>如果析构函数不是虚的，则将只调用对应于指针类型的析构函数。如果析构函数是虚的，将调用相应对象类型的析构函数</strong>。因此，<strong>如果基类指针指向的是派生类对象，将调用派生类 的析构函数，然后自动调用基类的析构函数</strong>。因此，<strong>使用虚析构函数可以确保正确的析构函数序列被调用</strong></li></ul></li><li>注意:如果要在派生类中重新定义基类的方法，通常应将基类方法声明为虚的。这样，程序将根据对象类型而不是引用或指针的类型来选择方法版本。为基类声明一个虚析构函数也是一种惯例。</li></ul><h3 id="13-4-1指针和引用类型的兼容性"><a href="#13-4-1指针和引用类型的兼容性" class="headerlink" title="13.4.1指针和引用类型的兼容性"></a>13.4.1指针和引用类型的兼容性</h3><ul><li><p>在C++中，动态联编与通过指针和引用调用方法相关，从某种程度上说，这是由继承控制的。</p></li><li><p>将派生类引用或指针转换为基类引用或指针被称为向上强制转换(upcasting),这使公有继承不需要进行显式类型转换。该规则是is-a 关系的一部分。 BrassPlus 对象都是Brass对象，因为它继承了Brass对象</p></li><li><p>相反的过程——将 基类指针或引用转换为派生类指针或引用——称 为向下强制转换。如果不使用显式类型转换，则向下强制转换是不允许的。原因是is-a 关系通常是不可逆的。派生类可以新</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> nane[<span class="number">401</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> show <span class="title">nane</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singer</span> :</span> <span class="keyword">public</span> Employee&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">range</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Employee veep;</span><br><span class="line">Singer trala;</span><br><span class="line">Employee pe= &amp;trala; <span class="comment">// 允许向上隐式类型转换</span></span><br><span class="line">Singer* ps = (Singer *) &amp;veep; <span class="comment">// 必须向下显式类型转换</span></span><br><span class="line">pe-&gt;<span class="function">show <span class="title">nane</span><span class="params">()</span></span>; <span class="comment">// 向上转换带来安全操作，因为Singer是Employee(每个singer都继承姓名)</span></span><br><span class="line">ps-&gt;range(); <span class="comment">//向下转换可能带来不安全的操作，因为Employee并不是Singer(Eaployee没有有range()方法)</span></span><br></pre></td></tr></table></figure></li><li><p>如果要在派生类中重新定义基类的方法，则将它设置为虚方法;否则，设置为非虚方法。</p></li></ul><h3 id="13-4-3有关虚函数注意事项"><a href="#13-4-3有关虚函数注意事项" class="headerlink" title="13.4.3有关虚函数注意事项"></a>13.4.3有关虚函数注意事项</h3><h4 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.  构造函数"></a>1.  构造函数</h4><p><strong>构造函数不能是虚函数。</strong>创建派生类对象时，将调用派生类的构造函数，而不是基类的构造函数，然后，派生类的构造函数将使用基类的一个构造函数，这种顺序不同于继承机制。因此，派生类不继承基类的构造函数，所以将类构造函数声明为虚的没什么意义。</p><h4 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2.  析构函数"></a>2.  析构函数</h4><p><strong>析构函数应当是虚函数，除非类不用做基类。</strong>例如，假设Employee是基类，Singer 是派生类,并添加一个char *成员，该成员指向由new分配的内存。当Singer对象过期时，必须调用~Singer( )析构函数来释放内存。</p>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee * pe = <span class="keyword">new</span> Singer; </span><br><span class="line"><span class="keyword">delete</span> pe;</span><br></pre></td></tr></table></figure><ul><li>如果使用默认的静态联编，delete 语句将调用~Employee( )析构函数。这将释放由Singer 对象中的Employee部分指向的内存，但不会释放新的类成员指向的内存。</li></ul><ul><li>如果析构函数是虚的，则上述代码将先调用<del>Singer析构函数释放由Singer组件指向的内存,然后,调用</del>Employee()析构函数来释放由Employee组件指向的内存。<br>这意味着，即使基类不需要显式析构函数提供服务，也不应依赖于默认析构函数，而应提供虚析构函数，即使它不执行任何操作: virtual ~BaseClass() { }</li><li>给类定义一个虚析构函数并非错误，即使这个类不用做基类:这只是一个效率方面的问题。<br>通常应给基类提供一个虚析构函数，即使它并不需要析构函数。</li></ul><h4 id="3-友元"><a href="#3-友元" class="headerlink" title="3.   友元"></a>3.   友元</h4><p>   友元不能是虚函数，因为友元不是类成员，而只有成员才能是虚函数。可以通过让友元函数使用虚成员函数来解决。</p><h4 id="4-没有重新定义"><a href="#4-没有重新定义" class="headerlink" title="4.  没有重新定义"></a>4.  没有重新定义</h4><p>   如果派生类没有重新定义函数，将使用该函数的基类版本。如果派生类位于派生链中，则将使用最新的虚函数版本，例外的情况是基类版本是隐藏的。</p><h4 id="5-重新定义将隐藏方法"><a href="#5-重新定义将隐藏方法" class="headerlink" title="5.  重新定义将隐藏方法"></a>5.  重新定义将隐藏方法</h4>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Dwelling</span>&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">showperks</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">const</span></span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Hovel</span> :</span> <span class="keyword">public</span> Dweling&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">showperks</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   Hovel trump;</span><br><span class="line">   trump.showperks() ;<span class="comment">// valid</span></span><br><span class="line">   trump.showperks(<span class="number">5</span>) ;<span class="comment">// invalid</span></span><br><span class="line">   trump.Dwelling::showperks(<span class="number">5</span>) ;<span class="comment">// valid</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   新定义将showperks( )定义为一个不接受任何参数的函数。重新定义不会生成函数的两个重载版本，而是隐藏了接受一个int参数的基类版本。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>重新定义继承的方法并不是重载。如果在派生类中重新定义函数，将不是使用相同的函数特征标覆盖基类声明，而是隐藏同名的基类方法，不管参数特征标如何。</li><li>如果派生类的函数与基类的函数同名，但是参数不同。此时，无论有无virtual关键字，积累的函数将被隐藏（注意别与重载混淆）。</li><li>如果派生类的函数与积累的函数同名，并且参数也相同，但是基类函数没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。</li></ul></blockquote><p>   这引出了两条经验规则:</p><ul><li>第一,如果重新定义继承的方法，应确保与原来的原型完全相同，但如果返回类型是基类引用或指针，则可以修改为指向派生类的引用或指针(这种例外是新出现的)。这种特性被称为返回类型协变(covariance of return type)，因为允许返回类型随类类型的变化而变化</li></ul><p>   这种例外只适用于返回值，而不适用于参数。</p><ul><li>第二，如果基类声明被重载了，则应在派生类中重新定义所有的基类版本。</li></ul><p>   如果只重新定义一个版本，则另外两个版本将被隐藏，派生类对象将无法使用它们。注意，如果不需要修改，则新定义可只调用基类版本</p>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Hovel: : showperks() <span class="keyword">const</span> &#123;Dwelling::showperks() ;&#125;</span><br></pre></td></tr></table></figure><h2 id="13-5访问控制-protected"><a href="#13-5访问控制-protected" class="headerlink" title="13.5访问控制: protected"></a>13.5访问控制: protected</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_n</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>关键字protected 与private 相似，在类外只能用公有类成员来访问protected部分中的类成员。</p></li><li><p>private 和protected之间的区别只有在基类派生的类中才会表现出来。</p></li><li><p>派生类的成员可以直接访问基类的保护成员，但不能直接访问基类的私有成员。</p><ul><li><p>对于<strong>外部</strong>世界来说,   保护成员的行为  ≈  私有成员的行为</p></li><li><p>对于<strong>派生类</strong>来说，    保护成员的行为  ≈  公有成员的行为</p></li></ul></li></ul><p>最好对类数据成员采用私有访问控制，不要使用保护访问控制</p><p>同时通过基类方法使派生类能够访问基类数据。<br>然而，对于成员函数来说，保护访问控制很有用，它让派生类能够访问公众不能使用的内部函数。</p><h2 id="13-6抽象基类（不一定要虚函数）-纯虚函数"><a href="#13-6抽象基类（不一定要虚函数）-纯虚函数" class="headerlink" title="13.6抽象基类（不一定要虚函数）             纯虚函数"></a>13.6抽象基类（不一定要虚函数）             纯虚函数</h2><p>C+ +通过使用纯虚函数(pure vitual function)提供未实现的函数。纯虚函数声明的结尾处为=0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseEllipse</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BaseEllipse(<span class="keyword">double</span> x0 = <span class="number">0</span>, <span class="keyword">double</span> y0 = <span class="number">0</span>) : x(x0) ,y(y0) &#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~BaseEllipse() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> nx, ny)</span> </span>&#123; X= nx; y= ny; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Area</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>当类声明中包含纯虚函数时，则不能创建该类的对象。包含纯虚函数的类只用作基类。</strong></p><p><strong>要成为真正的ABC（抽象基类）,必须至少包含一个纯虚函数。</strong>即原型中的=0使虚函数成为纯虚函数，比如这里的方法Area()没有定义。</p><p><strong>C++甚至允许纯虚函数有定义</strong>。例如，也许所有的基类方法都与Move()一样，可以在基类中进行定义，但您仍需要将这个类声明为抽象的。在这种情况下，可以将原型声明为虚的:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> nx，ny)</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这将使基类成为抽象的，但您仍可以在实现文件中提供方法的定义:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BaseEllipse: :Move(<span class="keyword">int</span> nx，ny) &#123; x = nx;y= ny; &#125;</span><br></pre></td></tr></table></figure><p>总之，<strong>在原型中使用=0指出类是一个抽象基类，在类中可以不定义该函数。</strong></p><h2 id="13-7-继承和动态内存分配"><a href="#13-7-继承和动态内存分配" class="headerlink" title="13.7 继承和动态内存分配"></a>13.7 继承和动态内存分配</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baseDMA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> * label;</span><br><span class="line">    <span class="keyword">int</span> rating;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    baseDMA(<span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>, <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    baseDMA(<span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">virtual</span> ~baseDMA();</span><br><span class="line">    baseDMA &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp; os, <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lacksDMA</span> :</span><span class="keyword">public</span> baseDMA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">enum</span> &#123; COL_LEN = <span class="number">40</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> color[COL_LEN];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    lacksDMA(<span class="keyword">const</span> <span class="keyword">char</span> * c = <span class="string">&quot;blank&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>, <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    lacksDMA(<span class="keyword">const</span> <span class="keyword">char</span> * c, <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp; os, <span class="keyword">const</span> lacksDMA &amp; rs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>复制类成员或继承的类组件时，则是使用该类的复制构造函数完成的。</strong>所以，lacksDMA类的默认复制构造函数将使用显式baseDMA复制构造函数baseDMA (const baseDMA &amp; rs)来复制lacksDMA对象的baseDMA部分。</p></li><li><p>对于赋值来说，也是如此。<strong>类的默认赋值运算符将自动使用基类的赋值运算符baseDMA &amp; operator= (const baseDMA &amp; rs) 来对基类组件进行赋值。</strong></p></li><li><p><strong>类的默认析构函数会将自动使用基类的析构函数~baseDMA()来对类成员或继承的类组件析构。</strong>故其自身的职责是对派生类构造函数执行工作的部分进行清理。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hasDMA</span> :</span><span class="keyword">public</span> baseDMA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> * style;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    hasDMA(<span class="keyword">const</span> <span class="keyword">char</span> * s = <span class="string">&quot;none&quot;</span>, <span class="keyword">const</span> <span class="keyword">char</span> * l = <span class="string">&quot;null&quot;</span>,</span><br><span class="line">              <span class="keyword">int</span> r = <span class="number">0</span>);</span><br><span class="line">    hasDMA(<span class="keyword">const</span> <span class="keyword">char</span> * s, <span class="keyword">const</span> baseDMA &amp; rs);</span><br><span class="line">    hasDMA(<span class="keyword">const</span> hasDMA &amp; hs);</span><br><span class="line">    ~hasDMA();</span><br><span class="line">    hasDMA &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> hasDMA &amp; rs);  </span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream &amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp; os, </span><br><span class="line">                                     <span class="keyword">const</span> hasDMA &amp; rs);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hasDMA复制构造函数只能访问hasDMA的数据，因此它必须调用baseDMA复制构造函数来处理共享的baseDMA数据:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">hasDMA: : hasDMA (<span class="keyword">const</span> hasDMA &amp; hs) : baseDMA (hs)&#123;</span><br><span class="line">style = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="built_in">std</span>: :<span class="built_in">strlen</span> (hs.style) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>: :<span class="built_in">strcpy</span>(style，hs.style) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的一点是， <strong>成员初始化列表将一个hasDMA引用传递给baseDMA构造函数</strong>。</p><p>没有参数类型为hasDMA引用的baseDMA构造函数，也不需要这样的构造函数。</p><p>因为<strong>复制构造函数baseDMA有一个baseDMA引用参数，而基类引用可以指向派生类型。</strong></p><p>因此，baseDMA 复制构造函数<strong>将使用   const hasDMA &amp; hs参数的baseDMA部分来构造新对象的baseDMA部分。</strong></p><h3 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hasDMA &amp; hasDMA: : <span class="keyword">operator</span>= (<span class="keyword">const</span> hasDMA &amp; hs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;hs&#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    baseDMA: :<span class="keyword">operator</span>=(hs); <span class="comment">// 通过使用函数表示法，而不是运算符表示法，可以使用作用域解析运算法</span></span><br><span class="line">    <span class="keyword">delete</span> [] style;</span><br><span class="line">    style = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="built_in">std</span>: :<span class="built_in">strlen</span>(hs.sty1e) + <span class="number">1</span>] ;</span><br><span class="line">    <span class="built_in">std</span>: :<span class="built_in">strcpy</span> (style，hs.style) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>: :ostream &amp; <span class="keyword">operator</span>&lt;&lt; (<span class="built_in">std</span>: :ostream &amp; os，<span class="keyword">const</span> hasDMA &amp; hs)&#123;</span><br><span class="line">    os &lt;&lt; (<span class="keyword">const</span> baseDMA &amp;) hs;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;Style: ”&lt;&lt; hs.style &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    return os;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;类继承&quot;&gt;&lt;a href=&quot;#类继承&quot; class=&quot;headerlink&quot; title=&quot;类继承&quot;&gt;&lt;/a&gt;类继承&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本章内容包括：&lt;ul&gt;
&lt;li&gt;is-a 关系的继承。&lt;/li&gt;
&lt;li&gt;如何以公有方式从一个类派生出另一个类。&lt;/li&gt;
&lt;li&gt;保护访问。&lt;/li&gt;
&lt;li&gt;构造函数成员初始化列表。&lt;/li&gt;
&lt;li&gt;向上和向下强制转换。&lt;/li&gt;
&lt;li&gt;虚成员函数。&lt;/li&gt;
&lt;li&gt;早期（静态）联编与晚期（动态）联编。&lt;/li&gt;
&lt;li&gt;抽象基类。&lt;/li&gt;
&lt;li&gt;纯虚函数。&lt;/li&gt;
&lt;li&gt;何时及如何使用公有继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C++" scheme="http://diudiu6.com/categories/C/"/>
    
    <category term="C++ primer plus" scheme="http://diudiu6.com/categories/C/C-primer-plus/"/>
    
    <category term="第十三章" scheme="http://diudiu6.com/categories/C/C-primer-plus/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/"/>
    
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
    <category term="C++ primer plus" scheme="http://diudiu6.com/tags/C-primer-plus/"/>
    
  </entry>
  
  <entry>
    <title>符合python风格的对象</title>
    <link href="http://diudiu6.com/2019/05/22/%E7%AC%A6%E5%90%88python%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>http://diudiu6.com/2019/05/22/%E7%AC%A6%E5%90%88python%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%AF%B9%E8%B1%A1/</id>
    <published>2019-05-22T02:23:52.000Z</published>
    <updated>2019-05-22T04:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>得益于 Python 数据模型，自定义类型的行为可以像内置类型那样自然。实现如自然的行为，靠的不是继承，而是鸭子类型（duck typing）：我们只需按照预定行为实对象所需的方法即可。</p><a id="more"></a><h1 id="1-特殊方法"><a href="#1-特殊方法" class="headerlink" title="1.特殊方法"></a>1.特殊方法</h1><p>repr()<br>　　以便于开发者理解的方式返回对象的字符串表示形式。<br>str()<br>　　以便于用户理解的方式返回对象的字符串表示形式。</p><p>bytes()<br>　　调用它获取对象的字节序列表示形式</p><p>__format__ 方法会被内置的 format() 函数和 str.format() 方法调用<br>　　使用特殊的格式代码显示对象的字符串表示形式</p><p> print 函数会调用 str 函数</p><p> bytes 函数会调用 __bytes__ 方法，生成实例的二进制表示形式。</p><p> abs 函数会调用 __abs__ 方法，返回实例的模。</p><p> bool 函数会调用 __bool__ 方法，如果实例的模为零，返回 False，否则返回 True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector2d</span>:</span></span><br><span class="line">    typecode = <span class="string">&#x27;d&#x27;</span>  <span class="comment">#  typecode 是类属性，在 Vector2d 实例和字节序列之间转换时使用。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.x = float(x)   <span class="comment"># 在 __init__ 方法中把 x 和 y 转换成浮点数，尽早捕获错误，以防调用 Vector2d 函数时传入不当参数。</span></span><br><span class="line">        self.y = float(y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (i <span class="keyword">for</span> i <span class="keyword">in</span> (self.x, self.y))  <span class="comment"># 定义 __iter__ 方法，把 Vector2d 实例变成可迭代的对象，这样才能拆包（例如，x, y = my_vector）。这个方法的实现方式很简单，直接调用生成器表达式一个接一个产出分量。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        class_name = type(self).__name__</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;(&#123;!r&#125;, &#123;!r&#125;)&#x27;</span>.format(class_name, *self)  <span class="comment">#__repr__ 方法使用 &#123;!r&#125; 获取各个分量的表示形式，然后插值，构成一个字符串；因为 Vector2d 实例是可迭代的对象，所以 *self 会把 x 和 y 分量提供给 format 函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> str(tuple(self))  <span class="comment"># 从可迭代的 Vector2d 实例中可以轻松地得到一个元组，显示为一个有序对。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bytes__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (bytes([ord(self.typecode)]) +  <span class="comment"># 为了生成字节序列，我们把 typecode 转换成字节序列，然后……</span></span><br><span class="line">                bytes(array(self.typecode, self)))  <span class="comment"># ……迭代 Vector2d 实例，得到一个数组，再把数组转换成字节序列。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> tuple(self) == tuple(other)  <span class="comment"># 为了快速比较所有分量，在操作数中构建元组。对 Vector2d 实例来说，可以这样做，不过仍有问题。参见下面的警告。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> math.hypot(self.x, self.y)  <span class="comment">#模是 x 和 y 分量构成的直角三角形的斜边长。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> bool(abs(self))  <span class="comment"># __bool__ 方法使用 abs(self) 计算模，然后把结果转换成布尔值，因此，0.0 是False，非零值是 True。</span></span><br></pre></td></tr></table></figure><h1 id="2-格式化显示"><a href="#2-格式化显示" class="headerlink" title="2.格式化显示"></a>2.格式化显示</h1><p>内置的 format() 函数和 str.format() 方法把各个类型的格式化方式委托给相应的.__format__(format_spec) 方法。format_spec 是格式说明符，他是：</p><ul><li>format(my_obj, format_spec) 的第二个参数，或者</li><li>str.format() 方法的格式字符串，{} 里代换字段中冒号后面的部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>brl = <span class="number">1</span>/<span class="number">2.43</span>  <span class="comment"># BRL到USD的货币兑换比价</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>brl</span><br><span class="line"><span class="number">0.4115226337448559</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(brl, <span class="string">&#x27;0.4f&#x27;</span>)  <span class="comment">#  格式说明符是 &#x27;0.4f&#x27;。</span></span><br><span class="line"><span class="string">&#x27;0.4115&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;1 BRL = &#123;rate:0.2f&#125; USD&#x27;</span>.format(rate=brl)  <span class="comment">#  格式说明符是 &#x27;0.2f&#x27;。代换字段中的 &#x27;rate&#x27; 子串是字段名称，与格式说明符无关，但是它决定把 .format() 的哪个参数传给代换字段。</span></span><br><span class="line"><span class="string">&#x27;1 BRL = 0.41 USD&#x27;</span></span><br></pre></td></tr></table></figure><p>‘{0.mass:5.3e}’ 这样的格式字符串其实包含两部分，冒号左边的 ‘0.mass’ 在代换字段句法中是字段名，冒号后面的 ‘5.3e’ 是格式说明符</p><p>格式说明符使用的表示法叫格式规范微语言</p><h2 id="格式描述"><a href="#格式描述" class="headerlink" title="格式描述"></a>格式描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">fill </span><br><span class="line">可以是任意字符，默认为空格。</span><br><span class="line"></span><br><span class="line">align </span><br><span class="line">仅当指定最小宽度时有效。</span><br><span class="line"></span><br><span class="line">&lt; 左对齐（默认选项）</span><br><span class="line">&gt; 右对齐</span><br><span class="line">= 仅对数字有效；将填充字符放到符号与数字间，例如 +<span class="number">0001234</span></span><br><span class="line">^ 居中对齐</span><br><span class="line">sign </span><br><span class="line">仅对数字有效</span><br><span class="line"></span><br><span class="line">+ 所有数字均带有符号</span><br><span class="line">- 仅负数带有符号（默认选项）</span><br><span class="line"> 即空格；正数前面带空格，负数前面带符号</span><br><span class="line"><span class="string">&#x27;#&#x27;</span> </span><br><span class="line">只对整数有效</span><br><span class="line"></span><br><span class="line">自动在二进制、八进制、十六进制数值前添加对应的 <span class="number">0</span>b、<span class="number">0</span>o、 <span class="number">0</span>x。</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;,&#x27;</span> </span><br><span class="line">自动在每三个数字之间添加 , 分隔符。</span><br><span class="line"></span><br><span class="line">width </span><br><span class="line">十进制数字，定义最小宽度。如果未指定，则由内容的宽度来决定。</span><br><span class="line"></span><br><span class="line">如果没有指定对齐方式（align），那么可以在 width 前面添加一个<span class="number">0</span>来实现自动填充<span class="number">0</span>，等价于 fill 设为 <span class="number">0</span> 并且 align 设为 =。</span><br><span class="line"></span><br><span class="line">precision </span><br><span class="line">用于确定浮点数的精度，或字符串的最大长度。不可用于整型数值。</span><br><span class="line"></span><br><span class="line">type </span><br><span class="line">确定参数类型，默认为 s ，即字符串。</span><br><span class="line"></span><br><span class="line">整数输出类型：</span><br><span class="line"></span><br><span class="line">b：以二进制格式输出</span><br><span class="line">c：将整数转换成对应的 unicode 字符</span><br><span class="line">d：以十进制输出（默认选项）</span><br><span class="line">o：以八进制输出</span><br><span class="line">x：以十六进制小写输出</span><br><span class="line">X：以十六进制大写输出</span><br><span class="line">n：与 d 相同，但使用当前环境的分隔符来分隔每<span class="number">3</span>位数字</span><br><span class="line">十进制浮点数输出类型：</span><br><span class="line"></span><br><span class="line">e：指数标记；使用科学计数法输出，用e来表示指数部分，默认 precision 为<span class="number">6</span></span><br><span class="line">E：与 e 相同，但使用大写 E 来表示指数部分</span><br><span class="line">f：以定点形式输出数值，默认 precision 为<span class="number">6</span></span><br><span class="line">F：与 f 相同</span><br><span class="line">g：通用格式；对于给定的 precision p &gt;= <span class="number">1</span>，取数值的p位有效数字，并以定点或科学计数法输出（默认选项）</span><br><span class="line">G：通用格式；与 g 相同，当数值过大时使用 E 来表示指数部分</span><br><span class="line">n：与 g 相同，但使用当前环境的分隔符来分隔每<span class="number">3</span>位数字</span><br><span class="line">%：百分比标记；使用百分比的形式输出数值，同时设定 f 标记</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>格式规范微语言是可扩展的，因为各个类可以自行决定如何解释 format_spec 参数</p><p>如果类没有定义 <strong>format</strong> 方法，从 object 继承的方法会返回 str(my_object)。</p><p>然而，如果传入格式说明符，object.<strong>format</strong> 方法会抛出 TypeError：</p><p>示例 Vector2d.<strong>format</strong> 方法，第 1 版</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Vector2d类中定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__format__</span>(<span class="params">self, fmt_spec=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    components = (format(c, fmt_spec) <span class="keyword">for</span> c <span class="keyword">in</span> self)  <span class="comment"># 使用内置的 format 函数把 fmt_spec 应用到向量的各个分量上，构建一个可迭代的格式化字符串。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#123;&#125;, &#123;&#125;)&#x27;</span>.format(*components)  <span class="comment"># 把格式化字符串代入公式 &#x27;(x, y)&#x27; 中</span></span><br></pre></td></tr></table></figure><h1 id="3-可散列的Vector2d"><a href="#3-可散列的Vector2d" class="headerlink" title="3.可散列的Vector2d"></a>3.可散列的Vector2d</h1><p>目前 Vector2d 实例是不可散列的，因此不能放入集合（set）中</p><p>为了把 Vector2d 实例变成可散列的，必须使用 <strong>hash</strong> 方法（还需要 __eq__ 方法，前面已经实现了）此外，还要让向量不可变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector2d</span>:</span></span><br><span class="line">    typecode = <span class="string">&#x27;d&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.__x = float(x)  <span class="comment">#使用两个前导下划线（尾部没有下划线，或者有一个下划线），把属性标记为私有</span></span><br><span class="line">        self.__y = float(y)</span><br><span class="line"><span class="meta">    @property  # @property 装饰器把读值方法标记为特性。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span>  <span class="comment">#读值方法与公开属性同名，都是 x</span></span><br><span class="line">        <span class="keyword">return</span> self.__x  <span class="comment">#直接返回 self.__x</span></span><br><span class="line"><span class="meta">    @property # 以同样的方式处理 y 特性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (i <span class="keyword">for</span> i <span class="keyword">in</span> (self.x, self.y)) <span class="comment"># 需要读取 x 和 y 分量的方法可以保持不变，通过 self.x 和 self.y 读取公开特性，而不必读取私有属性，因此上述代码清单省略了这个类的其他代码。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> hash(self.x) ^ hash(self.y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> tuple(self) == tuple(other) </span><br></pre></td></tr></table></figure><p><strong>要想创建可散列的类型，不一定要实现特性，也不一定要保护实例属性。只需正确地实现 hash 和 eq 方法即可。但是，实例的散列值绝不应该变化，因此我们借机提到了只读特性。</strong></p><h1 id="4-Python的私有属性和“受保护的”属性"><a href="#4-Python的私有属性和“受保护的”属性" class="headerlink" title="4.Python的私有属性和“受保护的”属性"></a>4.Python的私有属性和“受保护的”属性</h1><p>现在，你创建了 Dog 类的子类：Beagle。，如果以  __mood 的形式（两个前导下划线，尾部没有或最多有一个下划线）命名实例属性，Python 会把属性名存入实例的  __dict__ 属性中，而且会在前面加上一个下划线和类名。因此，对 Dog 类来说，__mood 会变成 _Dog__mood；这个语言特性叫名称改写</p><p>但是，只要知道改写私有属性名的机制，任何人都能直接读取私有属性——这对调试和序列化倒是有用。此外，只要编写 v1._Vector__x = 7 这样的代码，就能轻松地为 Vector2d 实例的私有分量直接赋值。</p><p>Python 解释器不会对使用单个下划线（如self._x)的属性名做特殊处理，不过这是很多 Python 程序员严格遵守的约定，他们不会在类外部访问这种属性。</p><p>（注：像遵守使用全大写字母编写常量）</p><p>Python 文档的某些角落把使用一个下划线前缀标记的属性称为“受保护的”属性。  使用self._x 这种形式保护属性的做法很常见，但是很少有人把这种属性叫作“受保护的”属性。有些人甚至将其称为“私有”属性。</p><h1 id="5-使用-slots-类属性节省空间"><a href="#5-使用-slots-类属性节省空间" class="headerlink" title="5.使用 __slots__ 类属性节省空间"></a>5.使用 __slots__ 类属性节省空间</h1><p>默认情况下，Python 在各个实例中名为 <strong>dict</strong> 的字典里存储实例属性。为了使用底层的散列表提升访问速度，字典会消耗大量内存。如果要处理数百万个属性不多的实例，通过 __slots__ 类属性，能节省大量内存，方法是让解释器在元组中存储实例属性，而不用字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector2d</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;__x&#x27;</span>, <span class="string">&#x27;__y&#x27;</span>)</span><br><span class="line">    typecode = <span class="string">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><p>在类中定义 __slots__ 属性的目的是告诉解释器：“这个类中的所有实例属性都在这儿了！”这样，Python 会在各个实例中使用类似元组的结构存储实例变量，从而避免使用消耗内存的 __dict__ 属性。如果有数百万个实例同时活动，这样做能节省大量内存。</p><p>如果要处理数百万个数值对象，应该使用 NumPy 数组（参见 2.9.3 节）。NumPy 数组能高效使用内存，而且提供了高度优化的数值处理函数，其中很多都一次操作整个数组。</p><p>如果把 ‘__dict__‘ 这个名称添加到__slots__ 中，实例会在元组中保存各个实例的属性，此外还支持动态创建属性，这些属性存储在常规的 __dict__ 中。当然，把 ‘__dict__‘ 添加到 __slots__ 中可能完全违背了初衷，这取决于各个实例的静态属性和动态属性的数量及其用法。</p><p>在类中定义 _<em>slots__ 属性之后，实例不能再有 _<em>slots</em></em> 中所列名称之外的其他属性。这只是一个副作用，不是 __slots__ 存在的真正原因。不要使用__slots__ 属性禁止类的用户新增实例属性。</p><p><strong>__slots__ 是用于优化的，不是为了约束程序员</strong></p><p>为了让对象支持弱引用（参见 8.6 节），必须有这个属性。用户定义的类中默认就有 __weakref__ 属性。可是，如果类中定义了 __slots__ 属性，而且想把实例作为弱引用的目标，那么要把’__weakref__‘ 添加到 __slots__ 中</p><p>如果使用得当，__slots__ 能显著节省内存，不过有几点要注意。</p><ul><li>每个子类都要定义 __slots__ 属性，因为解释器会忽略继承的 __slots__ 属性。</li><li>实例只能拥有 __slots__ 中列出的属性，除非把 ‘__slots__‘ 加入 __slots__ 中（这样做就失去了节省内存的功效）。</li><li>如果不把 ‘__weakref__‘ 加入 __slots__，实例就不能作为弱引用的目标。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;得益于 Python 数据模型，自定义类型的行为可以像内置类型那样自然。实现如自然的行为，靠的不是继承，而是鸭子类型（duck typing）：我们只需按照预定行为实对象所需的方法即可。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://diudiu6.com/categories/Python/"/>
    
    <category term="流畅的python" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="第九章" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/%E7%AC%AC%E4%B9%9D%E7%AB%A0/"/>
    
    
    <category term="流畅的python" scheme="http://diudiu6.com/tags/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>CNN原理基本学习</title>
    <link href="http://diudiu6.com/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://diudiu6.com/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-05-21T11:42:07.000Z</published>
    <updated>2020-08-26T05:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本架构"><a href="#1-基本架构" class="headerlink" title="1.基本架构"></a>1.基本架构</h1><p>一个CNN网络一般都是卷积、池化、卷积、池化，…，全连接的模式。</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/3.png" class=""><p>最简单的就是</p><p>卷积层（特征提取）→激活函数（为了加入非线性因素）→池化层（采样层，用于压缩数据）→全连接层（用于分类）→反向传播算法，前馈神经网络等调整卷积核参数</p><a id="more"></a><p>简单的神经元</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/30.jpg" class=""><p>一个三层神经网络结构</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/31.jpg" class=""><p>上图中最左边的原始输入信息称之为输入层，最右边的神经元称之为输出层（上图中输出层只有一个神经元），中间的叫隐藏层。</p><h1 id="2-卷积层"><a href="#2-卷积层" class="headerlink" title="2.卷积层"></a>2.卷积层</h1><p>用一张<strong>动态卷积图</strong>来说明下卷积的原理</p><p><img src="1.gif"></p><p>卷积公式：<br>$$<br>\displaystyle \int^{\infty}_{-\infty}{f(τ)g(x-τ)dτ}<br>$$<br>g(x)——卷积核</p><p>物理意义：系统的某一时刻的输出是由多个输入同时作用（叠加）而成的</p><p>例子：<br>$$<br>\frac{\partial f}{\partial x} = f(x+1)-f(x)<br>$$</p><p>$$<br>\frac{\partial^2 f}{\partial x^2} = f(x+1)+f(x-1)-2f(x)<br>$$</p><p>$$<br>\overrightarrow{\nabla}^2f=\frac{\partial^2 f}{\partial x^2}+\frac{\partial^2 f}{\partial y^2}=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)-4f(x,y)<br>$$</p><p>$$<br>\overrightarrow{\nabla}^2f——拉普拉斯算子，强调图像中的灰度突变，可用于突出图像边缘<br>$$</p><p>$$<br>\downarrow\downarrow<br>$$</p><p>$$<br>\left[ \begin{matrix} 0 &amp;1 &amp;0 \1 &amp; -4 &amp;1 \ 0 &amp; 1 &amp; 0\end{matrix} \right]<br>$$</p><p>$$<br>\downarrow\downarrow<br>$$</p><p>作为g(x)与原图像f(x)卷积，可以用来锐化图像</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/2.png" class=""><p><strong>从这些案例中可以看出</strong></p><ol><li>原始图像通过与卷积核的数学运算，可以提取出图像的某些指定特征（features)</li><li>不同卷积核，提取的特征也是不一样的</li><li>即使提取的特征一样，不同的卷积核，效果也不一样</li></ol><p><strong>而CNN实际上也就是一个不断提取特征，进行特征选择，然后进行分类的过程，卷积在CNN里，就是充当前排步兵，首先对原始图像进行特征提取</strong></p><p>上动图中可以看出，一个5×5的原图与一个3×3的核（图中深红色部分）进行卷积，得到一个3×3的特征图。（此时，stride=2，padding= 1）</p><ul><li><code>stride</code>，一般称为步长。表示卷积核在图片上移动的格数。stride=1时，代表每次移动一格；stride=2时，则每次移动两格。有如下公式，</li></ul><p>$$<br>OutputSize=\frac{PictureSize−Kernel}{SizeStride}+1<br>$$</p><ul><li><code>padding</code>，即外围补0用以扩展图片。此时，<br>$$<br>OutputSize=\frac{PictureSize+2×Padding−KernelSize}{SizeStride}+1<br>$$</li></ul><p>一个3 * 3的source经过一个3 * 3的卷积核，特征映射成了一个1 * 1的特征值</p><p>卷积核代表了对应的权重</p><p>卷积核和图像进行点乘就代表卷积核里的权重单独对应到相应位置进行作用<br>$$<br>\displaystyle \sum^{}_{i}{w_ix_i=output}<br>$$</p><p>在CNN中卷积核的权重局部参数共享，通过反向传播来不断优化更新自己权重。</p><h1 id="3-激活函数"><a href="#3-激活函数" class="headerlink" title="3.激活函数"></a>3.激活函数</h1><p>由于线性函数具有可加性和齐次性</p><p>任意线性函数连接都可以等价为一个单一线性函数</p><p>所以线性神经网络没法解决非线性问题</p><p>我们就需要把线性神经网络，转成非线性的</p><p>我们从最简单的神经网络 Y = W×X +B入手，然后变成最简单的非线性神经网络Y = W×X×X+B</p><p>这是一个普通Y = X×X 的表达式</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/4.jpg" class=""><p>Y = W×X×X+B 经过一系列运算（理想的）</p><p>我们得到了如下：</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/5.jpg" class=""><p>变成曲线后，好像可以把这两类区分开诶</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/6.jpg" class=""><p>我们需要算出输出误差error (output Y - target Y) 来更新权值</p><p>如果我们的神经网络函数是线性的，那么它的导数就是个常数，意味着梯度和X 无关了，也就是和输入无关了</p><p>我们在做反向传播的时候，梯度的改变也变成常数，和输入的改变X(delta(x)) 无关了</p><p>常见的激活函数</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/7.jpg" class=""><p>sigmoid 只会输出正数，以及靠近0的输出变化率最大，tanh和sigmoid不同的是，tanh输出可以是负数，ReLu是输入只能大于0,如果你输入含有负数，ReLu就不适合，如果你的输入是图片格式，ReLu就挺常用的。</p><p>其实卷积层的输出，是特征提取后的，特征值越大，说明特征越明显，特征值小的就可以用激活函数滤去了。我对激活函数的作用理解差不多就是这样。</p><p>取其精华去其糟粕。</p><h1 id="4-池化层"><a href="#4-池化层" class="headerlink" title="4.池化层"></a>4.池化层</h1><p><img src="9.gif"></p><p>池化可以将一幅大的图像缩小，同时又保留其中的重要信息</p><p>它就是将输入图像进行缩小，减少像素信息，只保留重要信息</p><p>通常情况下，池化都是2×2大小，比如对于max-pooling来说，就是取输入图像中2×2大小的块中的最大值，作为结果的像素值，相当于将原始图像缩小了4倍(注：同理，对于average-pooling来说，就是取2×2大小块的平均值作为结果的像素值)</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/10.jpg" class=""><p>因为最大池化（max-pooling）保留了每一个小块内的最大值，所以它相当于保留了这一块最佳的匹配结果（因为值越接近1表示匹配越好）</p><p>这也就意味着它不会具体关注窗口内到底是哪一个地方匹配了，而只关注是不是有某个地方匹配上了</p><p>这也就能够看出，CNN能够发现图像中是否具有某种特征，而不用在意到底在哪里具有这种特征</p><p>通过加入池化层，可以很大程度上减少计算量，降低机器负载。</p><h1 id="5-全连接层"><a href="#5-全连接层" class="headerlink" title="5.全连接层"></a>5.全连接层</h1><p><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/11.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/12.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/13.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/14.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/15.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/16.jpg"></p><p>全连接层也能够有很多个，如下：</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/17.jpg" class=""><p>【综合上述所有结构】<br>这一整个过程，从前到后，被称作”前向传播“，得到一组输出，然后通过反向传播来不断纠正错误，进行学习。</p><img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/18.jpg" class=""><h1 id="6-反向传播"><a href="#6-反向传播" class="headerlink" title="6.反向传播"></a>6.反向传播</h1><p>此处数学原理可以参见：深度学习 —— 反向传播理论推导.</p><p>反向传播可分为四部分，分别是前向传导、损失函数、后向传导，以及权重更新</p><p>在前向传导中，选择一张训练图像数组并让它通过整个网络</p><p>在第一个训练样例上，由于所有的权重或者过滤器值都是随机初始化的，输出可能会是 [.1 .1 .1 .1 .1 .1 .1 .1 .1 .1]，即一个不偏向任何数字的输出</p><p>损失函数有许多种定义方法，常见的一种是 MSE （均方误差）<br>$$<br>E_{total}=\sum\frac{1}{2}(target-output)^2<br>$$<br>我们需要找出是哪部分输入（例子中的权重）直接导致了网络的损失（或错误）</p><p>这是一个 dL/dW 的数学等式，W 是特定层级的权重。我们接下来要做的是在网络中进行后向传导，测定出是哪部分权重导致了最大的损失，寻找调整方法并减少损失。一旦计算出该导数，将进行最后一步也就是权重更新。所有的过滤器的权重将会更新，以便它们顺着梯度方向改变。<br>$$<br>w = w_i-\eta\frac{dL}{dW}<br>$$</p><p>$$<br>w = 权重\quad w_i=初始权重\quad\eta=学习速率<br>$$</p><p>学习速率是一个由程序员决定的参数。高学习速率意味着权重更新的动作更大，因此可能该模式将花费更少的时间收敛到最优权重。然而，学习速率过高会导致跳动过大，不够准确以致于达不到最优点。</p><p><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/19.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/20.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/21.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/22.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/23.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/24.jpg"></p><h2 id="对于每个特征像素和投票权重，将其上下调整一下，看看错误如何变化"><a href="#对于每个特征像素和投票权重，将其上下调整一下，看看错误如何变化" class="headerlink" title="对于每个特征像素和投票权重，将其上下调整一下，看看错误如何变化"></a>对于每个特征像素和投票权重，将其上下调整一下，看看错误如何变化<img src="/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/25.jpg" class=""></h2><h2 id="我们需要设置的参数"><a href="#我们需要设置的参数" class="headerlink" title="我们需要设置的参数"></a>我们需要设置的参数</h2><ul><li><p>卷积层</p><blockquote><p>卷积层数目</p><p>卷积层大小</p></blockquote></li><li><p>池化层</p><blockquote><p>窗口大小</p><p>补零数</p></blockquote></li><li><p>全连接层</p><blockquote><p>全连接层数目</p></blockquote></li></ul><p>样本<br><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/26.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/27.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/28.jpg"><img src="CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/29.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-基本架构&quot;&gt;&lt;a href=&quot;#1-基本架构&quot; class=&quot;headerlink&quot; title=&quot;1.基本架构&quot;&gt;&lt;/a&gt;1.基本架构&lt;/h1&gt;&lt;p&gt;一个CNN网络一般都是卷积、池化、卷积、池化，…，全连接的模式。&lt;/p&gt;
&lt;img src=&quot;/2019/05/21/CNN%E5%8E%9F%E7%90%86%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/3.png&quot; class=&quot;&quot;&gt;



&lt;p&gt;最简单的就是&lt;/p&gt;
&lt;p&gt;卷积层（特征提取）→激活函数（为了加入非线性因素）→池化层（采样层，用于压缩数据）→全连接层（用于分类）→反向传播算法，前馈神经网络等调整卷积核参数&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://diudiu6.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CNN" scheme="http://diudiu6.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/CNN/"/>
    
    
    <category term="深度学习" scheme="http://diudiu6.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CNN" scheme="http://diudiu6.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>Python使用xpath爬取数据返回空列表解决方案</title>
    <link href="http://diudiu6.com/2019/03/28/xpath%E5%AE%9A%E4%BD%8D%E5%A4%B1%E8%B4%A5%E5%8E%9F%E5%9B%A0/"/>
    <id>http://diudiu6.com/2019/03/28/xpath%E5%AE%9A%E4%BD%8D%E5%A4%B1%E8%B4%A5%E5%8E%9F%E5%9B%A0/</id>
    <published>2019-03-28T05:27:29.000Z</published>
    <updated>2020-08-26T05:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学了下xpath定位来爬虫</p><p>刚刚试了下学校的srtp网站，发现爬取的数据返回是空列表</p><a id="more"></a><img src="/2019/03/28/xpath%E5%AE%9A%E4%BD%8D%E5%A4%B1%E8%B4%A5%E5%8E%9F%E5%9B%A0/1.png" class=""><p>直接获得的xpath是</p><p>//*[@id=”table1”]/tbody/tr[16]/td[7]</p><p>通过查询资料获得，<strong>是tbody问题造成的。浏览器会对html文本进行一定的规范化，所以会自动在路径中加入tbody，导致读取失败，在此处直接在路径中去除tbody即可。</strong></p><p>也就是</p><p>//*[@id=”table1”]/tr[16]/td[7]</p><p>即可</p><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line">__author__ = <span class="string">&quot;2019/3/27 22:02&quot;</span></span><br><span class="line">__time__ = <span class="string">&quot;Quzard&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">                         <span class="string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class="line">                         <span class="string">&#x27; Chrome/63.0.3239.84 Safari/537.36&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&quot;http://10.1.30.98:8080/srtp2/USerPages/SRTP/Report3.aspx?Code=04016613&quot;</span></span><br><span class="line"></span><br><span class="line">data = requests.get(url, headers=headers)</span><br><span class="line">data = data.text</span><br><span class="line">s = etree.HTML(data)</span><br><span class="line">print(s.xpath(<span class="string">&quot;//*[@id=&#x27;table1&#x27;]/tr[last()-1]/td[last()]/text()&quot;</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近学了下xpath定位来爬虫&lt;/p&gt;
&lt;p&gt;刚刚试了下学校的srtp网站，发现爬取的数据返回是空列表&lt;/p&gt;</summary>
    
    
    
    <category term="爬虫" scheme="http://diudiu6.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="xpath" scheme="http://diudiu6.com/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow介绍</title>
    <link href="http://diudiu6.com/2019/02/05/TensorFlow%E6%95%99%E7%A8%8B/"/>
    <id>http://diudiu6.com/2019/02/05/TensorFlow%E6%95%99%E7%A8%8B/</id>
    <published>2019-02-05T10:29:26.000Z</published>
    <updated>2020-08-26T05:49:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-关于TensorFlow"><a href="#1-关于TensorFlow" class="headerlink" title="1.关于TensorFlow"></a>1.关于TensorFlow</h1><p>TensorFlow是一个采用数据流图（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。</p><a id="more"></a><h3 id="1-1什么是数据流图（Data-Flow-Graph）"><a href="#1-1什么是数据流图（Data-Flow-Graph）" class="headerlink" title="1.1什么是数据流图（Data Flow Graph）"></a>1.1什么是数据流图（Data Flow Graph）</h3><p>  数据流图用“结点”（nodes）和“线”(edges)的有向图来描述数学计算。“节点” 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点/输出（push out）的终点，或者是读取/写入持久变量（persistent variable）的终点。“线”表示“节点”之间的输入/输出关系。这些数据“线”可以输运“size可动态调整”的多维数据数组，即“张量”（tensor）。张量从图中流过的直观图像是这个工具取名为“Tensorflow”的原因。一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。</p><img src="/2019/02/05/TensorFlow%E6%95%99%E7%A8%8B/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE.gif" class=""><h3 id="1-2TensorFLow-六大特性"><a href="#1-2TensorFLow-六大特性" class="headerlink" title="1.2TensorFLow 六大特性"></a>1.2TensorFLow 六大特性</h3><p>1.高度的灵活性—-提供很多的工具让你来构建图,也可以在tf基础上写上层库,对tf操作进行组合,还可以动手丰富底层操作,自己添加tf内容<br>2.真正的可移植性—-tf在CPU和GPU上运行，可以运行在台式机、服务器、手机移动设备,Android,ios都可以,平台之间转移可以不用改<br>3.将科研和产品联系在一起—-tf可以免去很大的代码重写工作,帮助科研工作者提高科研产出率<br>4.自动求微分—-用户只需要定义预测模型的结构，将这个结构和目标函数结合在一起，并添加数据,tf将自动为你计算相关的微分导数<br>5.多语言支持—-官方文档中写明,目前有python/c++使用界面,还鼓励开发者开发其他语言<br>6.性能最优化—-给予了线程、队列、异步操作等以最佳支持,tf让你可以将你手边硬件的计算潜能全部发挥出来。你可以自由地将tf图中的计算元素分配到不同设备上,tf可以帮你管理好这些不同副本</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-关于TensorFlow&quot;&gt;&lt;a href=&quot;#1-关于TensorFlow&quot; class=&quot;headerlink&quot; title=&quot;1.关于TensorFlow&quot;&gt;&lt;/a&gt;1.关于TensorFlow&lt;/h1&gt;&lt;p&gt;TensorFlow是一个采用数据流图（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://diudiu6.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="TensorFlow" scheme="http://diudiu6.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/TensorFlow/"/>
    
    
    <category term="TensorFlow" scheme="http://diudiu6.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>对象引用、可变性和垃圾回收</title>
    <link href="http://diudiu6.com/2019/02/04/%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E3%80%81%E5%8F%AF%E5%8F%98%E6%80%A7%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://diudiu6.com/2019/02/04/%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E3%80%81%E5%8F%AF%E5%8F%98%E6%80%A7%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</id>
    <published>2019-02-04T05:10:57.000Z</published>
    <updated>2020-08-26T05:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>名称不是对象，而是单独的东西。</p><p>Python 的变量：变量是标注，而不是盒子。</p><p>Python 变量类似于 Java 中的引用式变量，因此最好把它们理解为附加在对象上的标注</p><a id="more"></a><img src="/2019/02/04/%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E3%80%81%E5%8F%AF%E5%8F%98%E6%80%A7%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/1.png" class=""><p>对引用式变量来说，说把变量分配给对向更合理</p><p>Python 中的赋值语句，始终先读右边，对象在右边创建或获取，在此之后左边的变量才会绑定到对象上，这就像为对象贴上标注。</p><p>每个变量都有标识、类型和值。<strong>对象一旦创建，它的标识绝不会变</strong>；你可以把标识理解为对象在内存中的地址。is 运算符比较两个对象的标识；id() 函数返回对象标识的整数表示。ID 一定是唯一的数值标注，而且在对象的生命周期中绝不会变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alex = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Charles L. Dodgson&#x27;</span>, <span class="string">&#x27;born&#x27;</span>: <span class="number">1832</span>, <span class="string">&#x27;balance&#x27;</span>: <span class="number">950</span>&#125;</span><br><span class="line">alex == charles</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line">alex <span class="keyword">is</span> <span class="keyword">not</span> charles</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>在==和is之间选择</strong><br>== 运算符比较两个对象的值（对象中保存的数据），而 is 比较对象的标识（id号）。</p><h2 id="元组的相对不可变性"><a href="#元组的相对不可变性" class="headerlink" title="元组的相对不可变性"></a>元组的相对不可变性</h2><ul><li><p><strong>元组与多数 Python 集合（列表、字典、集，等等）一样，保存的是对象的引用。</strong></p></li><li><p><strong>即便元组本身不可变，元素依然可变</strong></p></li><li><p><strong>元组的不可变性其实是指 tuple 数据结构的物理内容（即保存的引用）不可变，与引用的对象无关</strong></p></li><li><p><strong>str、bytes 和 array.array 等单一类型序列是扁平的，它们保存的不是引用，而是在连续的内存中保存数据本身（字符、字节和数字）</strong></p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])  </span><br><span class="line">t2 = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])  </span><br><span class="line">t1 == t2  </span><br><span class="line">&gt;&gt;&gt;True</span><br><span class="line">id(t1[<span class="number">-1</span>])  </span><br><span class="line">&gt;&gt;&gt;<span class="number">4302515784</span></span><br><span class="line">t1[<span class="number">-1</span>].append(<span class="number">99</span>)  </span><br><span class="line">t1</span><br><span class="line">&gt;&gt;&gt;(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>, <span class="number">99</span>])</span><br><span class="line">id(t1[<span class="number">-1</span>])  </span><br><span class="line">&gt;&gt;&gt;<span class="number">4302515784</span></span><br><span class="line">t1 == t2  </span><br><span class="line">&gt;&gt;&gt;False</span><br></pre></td></tr></table></figure><h2 id="默认做浅复制"><a href="#默认做浅复制" class="headerlink" title="默认做浅复制"></a>默认做浅复制</h2><p>复制列表（或多数内置的可变集合）最简单的方式是使用内置的类型构造方法</p><p>对列表和其他可变序列来说，还能使用简洁的 l2 = l1[:]语句创建副本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = list(l1)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 == l1  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 <span class="keyword">is</span> l1  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>然而，构造方法或 [:] 做的是浅复制（即复制了最外层容器，副本中的元素是源容器中元素的引用）</strong></p><p><strong>如果所有元素都是不可变的，那么这样没有问题，还能节省内存</strong></p><p><strong>但是，如果有可变的元素，可能就会导致意想不到的问题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line">l2 = list(l1)      <span class="comment">#  l2 是 l1 的浅复制副本</span></span><br><span class="line">l1.append(<span class="number">100</span>)     <span class="comment"># 把 100 追加到 l1 中，对 l2 没有影响。</span></span><br><span class="line">l1[<span class="number">1</span>].remove(<span class="number">55</span>)   <span class="comment">#  把内部列表 l1[1] 中的 55 删除。这对 l2 有影响，因为l2[1] 绑定的列表与 l1[1]是同一个。</span></span><br><span class="line">print(<span class="string">&#x27;l1:&#x27;</span>, l1)</span><br><span class="line">print(<span class="string">&#x27;l2:&#x27;</span>, l2)</span><br><span class="line">l2[<span class="number">1</span>] += [<span class="number">33</span>, <span class="number">22</span>]  <span class="comment">#  对可变的对象来说，如 l2[1] 引用的列表，+= 运算符就地修改列表。这次修改在l1[1] 中也有体现，因为它是 l2[1] 的别名。</span></span><br><span class="line">l2[<span class="number">2</span>] += (<span class="number">10</span>, <span class="number">11</span>)  <span class="comment"># 对元组来说，+= 运算符创建一个新元组，然后重新绑定给变量 l2[2]。这等同于l2[2] = l2[2] + (10, 11)。现在，l1 和 l2 中最后位置上的元组不是同一个对象。</span></span><br><span class="line">print(<span class="string">&#x27;l1:&#x27;</span>, l1)</span><br><span class="line">print(<span class="string">&#x27;l2:&#x27;</span>, l2)</span><br></pre></td></tr></table></figure><p><strong>对元组来说，+= 运算符创建一个新元组</strong></p><h2 id="为任意对象做深复制和浅复制"><a href="#为任意对象做深复制和浅复制" class="headerlink" title="为任意对象做深复制和浅复制"></a>为任意对象做深复制和浅复制</h2><h3 id="copy-模块提供的-deepcopy-和-copy-函数能为任意对象做深复制和浅复制"><a href="#copy-模块提供的-deepcopy-和-copy-函数能为任意对象做深复制和浅复制" class="headerlink" title="copy 模块提供的 deepcopy 和 copy 函数能为任意对象做深复制和浅复制"></a>copy 模块提供的 deepcopy 和 copy 函数能为任意对象做深复制和浅复制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1 = Bus([<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bill&#x27;</span>, <span class="string">&#x27;Claire&#x27;</span>, <span class="string">&#x27;David&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2 = copy.copy(bus1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus3 = copy.deepcopy(bus1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(bus1), id(bus2), id(bus3)</span><br><span class="line">(<span class="number">4301498296</span>, <span class="number">4301499416</span>, <span class="number">4301499752</span>)  <span class="comment">#  使用 copy 和 deepcopy，创建 3 个不同的 Bus 实例。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.drop(<span class="string">&#x27;Bill&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2.passengers</span><br><span class="line">[<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Claire&#x27;</span>, <span class="string">&#x27;David&#x27;</span>]         <span class="comment">#  bus1 中的 &#x27;Bill&#x27; 下车后，bus2 中也没有他了。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</span><br><span class="line">(<span class="number">4302658568</span>, <span class="number">4302658568</span>, <span class="number">4302657800</span>)  <span class="comment"># 审查 passengers 属性后发现，bus1 和 bus2 共享同一个列表对象，因为 bus2 是bus1 的浅复制副本。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus3.passengers</span><br><span class="line">[<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bill&#x27;</span>, <span class="string">&#x27;Claire&#x27;</span>, <span class="string">&#x27;David&#x27;</span>]  <span class="comment"># bus3 是 bus1 的深复制副本，因此它的 passengers 属性指代另一个列表。</span></span><br></pre></td></tr></table></figure><p><strong>一般来说，深复制不是件简单的事。如果对象有循环引用，那么这个朴素的算法会进入无限循环。deepcopy 函数会记住已经复制的对象，因此能优雅地处理循环引用</strong></p><h2 id="函数的参数作为引用时"><a href="#函数的参数作为引用时" class="headerlink" title="函数的参数作为引用时"></a>函数的参数作为引用时</h2><ul><li><p><strong>Python 唯一支持的参数传递模式是共享传参（call by sharing）</strong></p></li><li><p><strong>共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参是实参的别名。</strong></p></li><li><p><strong>函数可能会修改作为参数传入的可变对象（比如列表），但是无法修改那些对象的<br>标识（即不能把一个对象替换成另一个对象）</strong></p></li></ul><h3 id="不要使用可变类型作为参数的默认值"><a href="#不要使用可变类型作为参数的默认值" class="headerlink" title="不要使用可变类型作为参数的默认值"></a>不要使用可变类型作为参数的默认值</h3><p><code>默认值在定义函数时计算（通常在加载模块时），因此默认值变成了函数对象的属性。因此，如果默认值是可变对象，而且修改了它的值，那么后续的函数调用都会受到影响。</code></p><h3 id="如果定义的函数接收可变参数，应该谨慎考虑调用方是否期望修改传入的参数"><a href="#如果定义的函数接收可变参数，应该谨慎考虑调用方是否期望修改传入的参数" class="headerlink" title="如果定义的函数接收可变参数，应该谨慎考虑调用方是否期望修改传入的参数"></a>如果定义的函数接收可变参数，应该谨慎考虑调用方是否期望修改传入的参数</h3><h2 id="del和垃圾回收"><a href="#del和垃圾回收" class="headerlink" title="del和垃圾回收"></a>del和垃圾回收</h2><ul><li><p>del 语句删除名称，而不是对象</p></li><li><p>del 命令可能会导致对象被当作垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时</p></li><li><p>重新绑定也可能会导致对象的引用数量归零，导致对象被销毁</p></li><li><p>有时需要引用对象，而不让对象存在的时间超过所需时间。这经常用在缓存中。</p></li><li><p>弱引用不会增加对象的引用数量。引用的目标对象称为所指对象（referent）</p></li><li><p>弱引用不会妨碍所指对象被当作垃圾回收。</p></li><li><p>弱引用是可调用的对象，返回的是被引用的对象；如果所指对象不存在了，返回 None</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> weakref</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wref = weakref.ref(a_set)  <span class="comment"># 创建弱引用对象 wref，下一行审查它。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wref</span><br><span class="line">&lt;weakref at <span class="number">0x100637598</span>; to <span class="string">&#x27;set&#x27;</span> at <span class="number">0x100636748</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wref()  <span class="comment"># 调用 wref() 返回的是被引用的对象，&#123;0, 1&#125;。因为这是控制台会话，所以 &#123;0, 1&#125;会绑定给 _ 变量。</span></span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;  <span class="comment">#  a_set 不再指代 &#123;0, 1&#125; 集合，因此集合的引用数量减少了。但是 _ 变量仍然指代它。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wref()  <span class="comment"># 调用 wref() 依旧返回 &#123;0, 1&#125;。</span></span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wref() <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment">#  计算这个表达式时，&#123;0, 1&#125; 存在，因此 wref() 不是 None。但是，随后 _ 绑定到结果值 False。现在 &#123;0, 1&#125; 没有强引用了。</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wref() <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment">#  因为 &#123;0, 1&#125; 对象不存在了，所以 wref() 返回 None。</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> weakref</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stock = weakref.WeakValueDictionary()  <span class="comment"># stock 是 WeakValueDictionary 实例。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>catalog = [Cheese(<span class="string">&#x27;Red Leicester&#x27;</span>), Cheese(<span class="string">&#x27;Tilsit&#x27;</span>),</span><br><span class="line"><span class="meta">... </span>                Cheese(<span class="string">&#x27;Brie&#x27;</span>), Cheese(<span class="string">&#x27;Parmesan&#x27;</span>)]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cheese <span class="keyword">in</span> catalog:</span><br><span class="line"><span class="meta">... </span>    stock[cheese.kind] = cheese  <span class="comment"># stock 把奶酪的名称映射到 catalog 中 Cheese 实例的弱引用上。</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class="line">[<span class="string">&#x27;Brie&#x27;</span>, <span class="string">&#x27;Parmesan&#x27;</span>, <span class="string">&#x27;Red Leicester&#x27;</span>, <span class="string">&#x27;Tilsit&#x27;</span>]  <span class="comment"># stock 是完整的。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> catalog</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class="line">[<span class="string">&#x27;Parmesan&#x27;</span>]  <span class="comment">#  删除 catalog 之后，stock 中的大多数奶酪都不见了，这是 WeakValueDictionary的预期行为。为什么不是全部呢？</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> cheese</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><strong>临时变量引用了对象，这可能会导致该变量的存在时间比预期长。通常，这对局部变量来说不是问题，因为它们在函数返回时会被销毁。</strong></p><p>*<em>不是每个 Python 对象都可以作为弱引用的目标（或称所指对象）。基本的 list 和 dict</em>实例不能作为所指对象，但是它们的子类可以轻松地解决这个问题**</p><p><strong>set 实例可以作为所指对象</strong></p><h2 id="变量保存的是引用，这一点对-Python-编程有很多实际的影响"><a href="#变量保存的是引用，这一点对-Python-编程有很多实际的影响" class="headerlink" title="变量保存的是引用，这一点对 Python 编程有很多实际的影响"></a>变量保存的是引用，这一点对 Python 编程有很多实际的影响</h2><ul><li>简单的赋值不创建副本。</li><li>对 += 或 *= 所做的增量赋值来说，如果左边的变量绑定的是不可变对象，会创建新对象；如果是可变对象，会就地修改。</li><li>为现有的变量赋予新值，不会修改之前绑定的变量。这叫重新绑定：现在变量绑定了其他对象。如果变量是之前那个对象的最后一个引用，对象会被当作垃圾回收。</li><li>函数的参数以别名的形式传递，这意味着，函数可能会修改通过参数传入的可变对象。这一行为无法避免，除非在本地创建副本，或者使用不可变对象（例如，传入元组，而不传入列表）。</li><li>使用可变类型作为函数参数的默认值有危险，因为如果就地修改了参数，默认值也就变了，这会影响以后使用默认值的调用。</li></ul><p>可以在自己的类中定义  __ eq __ 方法，决定 == 如何比较实例。如果不覆盖 __ eq __ 方法，那么从 object 继承的方法比较对象的 ID</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;名称不是对象，而是单独的东西。&lt;/p&gt;
&lt;p&gt;Python 的变量：变量是标注，而不是盒子。&lt;/p&gt;
&lt;p&gt;Python 变量类似于 Java 中的引用式变量，因此最好把它们理解为附加在对象上的标注&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://diudiu6.com/categories/Python/"/>
    
    <category term="流畅的python" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="第八章" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/%E7%AC%AC%E5%85%AB%E7%AB%A0/"/>
    
    
    <category term="流畅的python" scheme="http://diudiu6.com/tags/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://diudiu6.com/2019/02/04/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://diudiu6.com/2019/02/04/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2019-02-04T03:43:45.000Z</published>
    <updated>2019-05-21T09:50:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-是什么"><a href="#Markdown-是什么" class="headerlink" title="Markdown 是什么"></a>Markdown 是什么</h1><blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们<strong>使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）  文档</strong></p><p>这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><a id="more"></a><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>一个到多个<code>#</code>，然后空格，最后是文字。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标题H1</span><br><span class="line">## 标题H2</span><br><span class="line">### 标题H3</span><br><span class="line">#### 标题H4</span><br><span class="line">##### 标题H5</span><br><span class="line">###### 标题H6</span><br></pre></td></tr></table></figure><p>以上文本转换后如下：</p><h1 id="标题H1"><a href="#标题H1" class="headerlink" title="标题H1"></a>标题H1</h1><h2 id="标题H2"><a href="#标题H2" class="headerlink" title="标题H2"></a>标题H2</h2><h3 id="标题H3"><a href="#标题H3" class="headerlink" title="标题H3"></a>标题H3</h3><h4 id="标题H4"><a href="#标题H4" class="headerlink" title="标题H4"></a>标题H4</h4><h5 id="标题H5"><a href="#标题H5" class="headerlink" title="标题H5"></a>标题H5</h5><h6 id="标题H6"><a href="#标题H6" class="headerlink" title="标题H6"></a>标题H6</h6><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>提示符（<code>*</code>或者<code>-</code>或者<code>+</code>），然后是空格，最后是文字。敲击回车的时候，会自动出现新提示符。想要结束列表，连续敲两下回车即可。 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> A </span><br><span class="line"><span class="bullet">+</span> B </span><br><span class="line"><span class="bullet">+</span> C </span><br></pre></td></tr></table></figure><p>以上文本转换后得到： </p><ul><li>A </li><li>B </li><li>C </li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>先是数字，然后是<code>.</code>，再然后是空格，最后是文字。敲击回车的时候，会自动出现新序号。想要结束列表，连续敲两下回车即可。 </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> a </span><br><span class="line"><span class="number">2.</span> b </span><br><span class="line"><span class="number">3.</span> b </span><br></pre></td></tr></table></figure><ol><li>a </li><li>b </li><li>b </li></ol><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块和语法高亮"><a href="#代码块和语法高亮" class="headerlink" title="代码块和语法高亮"></a>代码块和语法高亮</h3><p>使用一对<strong>三个反引号</strong><br>来包含多行代码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​<span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">    int a = 0;</span></span><br><span class="line"><span class="string">    a++;</span></span><br><span class="line"><span class="string">​`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>在上面的语法基础上，在第一个<strong>三个反引号</strong> 之后添加代码的语言名称，即可实现语法高亮。 </p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​```python</span><br><span class="line">    int a = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    a++<span class="comment">;</span></span><br><span class="line">​```</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a = <span class="number">0</span>;</span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>可以通过两个反引号（Tab 键上方、数字 1 左侧的那个按键）插入行内代码。<br>反引号  int a = 100;   反引号</p><p>转换后是：</p><p><code> int a = 100;</code></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在一行中使用三个或更多的<code>-</code>或者<code>*</code>或者<code>_</code> ，然后换行。<br><code>---（回车）</code></p><p>效果如下：</p><hr><hr><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>用两个<code>*</code>把要强调的内容包含起来，则表现为斜体。<br><code>*我是斜体*</code><br>效果如下：</p><p><em>我是斜体</em></p><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>用两个<code>**</code>把要强调的内容包含起来，则表现为粗体。<br><code>**我是粗体**</code><br>效果如下：</p><p><strong>我是粗体</strong></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="单行引用"><a href="#单行引用" class="headerlink" title="单行引用"></a>单行引用</h3><p>在行首使用 <code>&gt;</code>符号，就可以将其后的内容标记为引用。<br><code>&gt;春风得意马蹄疾，一日看尽长安花</code> </p><p>效果如下：</p><blockquote><p>春风得意马蹄疾，一日看尽长安花</p></blockquote><h3 id="多行引用"><a href="#多行引用" class="headerlink" title="多行引用"></a>多行引用</h3><p>如果仅在第一行使用 <code>&gt;</code>， 后面相邻的行即使省略 <code>&gt;</code>，也会变成引用内容。<br><code>&gt;在天愿作比翼鸟，在地愿为连理枝。 </code></p><p><code>天长地久有时尽，此恨绵绵无绝期。</code></p><p>以上文本被转换为：</p><blockquote><p>在天愿作比翼鸟，在地愿为连理枝。<br>天长地久有时尽，此恨绵绵无绝期。</p></blockquote><p>要结束引用，在引用的末尾连续敲两个回车即可。</p><h3 id="嵌套的引用"><a href="#嵌套的引用" class="headerlink" title="嵌套的引用"></a>嵌套的引用</h3><p>用多个<code>&gt;</code>就可以表示嵌套的引用。<br><code>&gt;子曰</code><br><code>&gt;&gt;学而时习之，不亦说乎？有朋自远方来，不亦乐乎？</code> 效果如下：</p><blockquote><p>子曰</p><blockquote><p>学而时习之，不亦说乎？有朋自远方来，不亦乐乎？</p></blockquote></blockquote><h3 id="引用中可以使用其他语法"><a href="#引用中可以使用其他语法" class="headerlink" title="引用中可以使用其他语法"></a>引用中可以使用其他语法</h3><p>引用的内容也可以使用其他语法，比如标题、列表、强调等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">1. 我是列表</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">2. 我是列表</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">3. 我是列表</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">*我是斜体*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">**我是粗体**</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">        int a = 0;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">        int b = 1;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">        int c = a + b; 12345678910</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><ol><li>我是列表</li><li>我是列表</li><li>我是列表</li></ol><p><em>我是斜体</em><br><strong>我是粗体</strong></p><p>  int a = 0;<br>  int b = 1;<br>  int c = a + b; 12345678910</p></blockquote><hr><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p>格式为：<br><code>[链接文字](地址 &#39;标题&#39;)</code><br><strong>注</strong>：地址与标题之间有一个空格。</p><p>例如：<br><code>[百度首页](https://www.baidu.com/ &quot;跳转到百度首页&quot;)</code></p><p>效果如下：</p><p><a href="https://www.baidu.com/">百度首页</a></p><p>当你把鼠标停留在链接名称上，则会显示出标题。</p><p><strong>注</strong>：在不需要的情况下，标题可以省略。</p><h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><p>参考式超链接一般用在学术论文上，或者某个链接在文章中多处被引用的情况，这样便于对链接统一管理。</p><p>参考式链接的写法相当于把行内式拆分成两部分，并通过一个<strong>链接标记</strong>来连接两部分。</p><p>语法说明：<br>参考式链接分为两部分：首先写<br><code>[链接文字][链接标记]</code></p><p>然后在文本的任意位置写<br><code>[链接标记]:地址 &quot;标题&quot;</code></p><p>如果链接文字本身可以作链接标记，你也可以把上面两行分别写为：<br><code>[链接文字][]</code><br><code>[链接文字]:地址 &quot;标题&quot;</code></p><p>例如：<br><code>我经常去的几个网站是[GitHub][1]，[知乎][2]，[简书][3]。</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]<span class="symbol">:https</span><span class="symbol">://github</span>.com <span class="string">&quot;github.com&quot;</span></span><br><span class="line">[<span class="number">2</span>]<span class="symbol">:https</span><span class="symbol">://www</span>.zhihu.com <span class="string">&quot;zhihu.com&quot;</span> </span><br><span class="line">[<span class="number">3</span>]<span class="symbol">:http</span><span class="symbol">://www</span>.jianshu.com <span class="string">&quot;jianshu.com&quot;</span> </span><br></pre></td></tr></table></figure><p>效果：</p><p>我经常去的几个网站是<a href="https://github.com/">GitHub</a>，<a href="https://www.zhihu.com/">知乎</a>，<a href="http://www.jianshu.com/">简书</a>。</p><p>如果把链接文字本身作为链接标记，则写为：<br><code>我经常去的几个网站是[GitHub][]，[知乎][]，[简书][]。</code></p><p><code>[GitHub]:https://github.com &quot;github.com&quot;</code><br><code>[知乎]:https://www.zhihu.com &quot;zhihu.com&quot;</code><br><code>[简书]:http://www.jianshu.com &quot;jianshu.com&quot;</code></p><p>效果：<br>我经常去的几个网站是<a href="https://github.com/">GitHub</a>，<a href="https://www.zhihu.com/">知乎</a>，<a href="http://www.jianshu.com/">简书</a>。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>插入图片的语法和插入超链接的语法基本一致，只是在最前面多一个<code>!</code>。也分为行内式和参考式两种。<br>行内式： <code>![炮姐](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1549263234828&amp;di=4a344f759b9ceb725d0e741500b7d0b3&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201503%2F29%2F20150329004520_mL3HU.jpeg &quot;炮姐萌吗&quot;)</code></p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1549263234828&di=4a344f759b9ceb725d0e741500b7d0b3&imgtype=0&src=http://b-ssl.duitang.com/uploads/item/201503/29/20150329004520_mL3HU.jpeg" alt="炮姐" title="炮姐萌吗"></p><p>参考式1：<br><code>![炮姐][4]</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">4</span>]:https://timgsa.baidu.com/timg?image&amp;quality=<span class="number">80</span>&amp;size=b<span class="number">9999</span>_<span class="number">10000</span>&amp;sec=<span class="number">1549263234828</span>&amp;di=<span class="number">4</span>a<span class="number">344</span>f<span class="number">759</span>b<span class="number">9</span>ceb<span class="number">725</span>d<span class="number">0e741500</span>b<span class="number">7</span>d<span class="number">0</span>b<span class="number">3</span>&amp;imgtype=<span class="number">0</span>&amp;src=http<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>Fb-ssl.duitang.com<span class="symbol">%2</span>Fuploads<span class="symbol">%2</span>Fitem<span class="symbol">%2</span>F<span class="number">201503</span><span class="symbol">%2</span>F<span class="number">29</span><span class="symbol">%2</span>F<span class="number">20150329004520</span>_mL<span class="number">3</span>HU.jpeg <span class="string">&quot;参考式1——炮姐萌吗&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1549263234828&di=4a344f759b9ceb725d0e741500b7d0b3&imgtype=0&src=http://b-ssl.duitang.com/uploads/item/201503/29/20150329004520_mL3HU.jpeg" alt="炮姐" title="炮姐萌吗"></p><p>参考式2（把链接文字本身作为链接标记）：<br><code>![炮姐][]</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[炮姐]:https://timgsa.baidu.com/timg?image&amp;quality=<span class="number">80</span>&amp;size=b<span class="number">9999</span>_<span class="number">10000</span>&amp;sec=<span class="number">1549263234828</span>&amp;di=<span class="number">4</span>a<span class="number">344</span>f<span class="number">759</span>b<span class="number">9</span>ceb<span class="number">725</span>d<span class="number">0e741500</span>b<span class="number">7</span>d<span class="number">0</span>b<span class="number">3</span>&amp;imgtype=<span class="number">0</span>&amp;src=http<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>Fb-ssl.duitang.com<span class="symbol">%2</span>Fuploads<span class="symbol">%2</span>Fitem<span class="symbol">%2</span>F<span class="number">201503</span><span class="symbol">%2</span>F<span class="number">29</span><span class="symbol">%2</span>F<span class="number">20150329004520</span>_mL<span class="number">3</span>HU.jpeg <span class="string">&quot;参考式2——炮姐萌吗&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1549263234828&di=4a344f759b9ceb725d0e741500b7d0b3&imgtype=0&src=http://b-ssl.duitang.com/uploads/item/201503/29/20150329004520_mL3HU.jpeg" alt="炮姐" title="炮姐萌吗"></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>Markdown可以利用反斜线<code>\</code>来插入一些在语法中有其它意义的符号。<br>例如：想把星号加在文字两侧（但不是斜体），你可以在星号的前面加上反斜线：<br><code>\*literal asterisks\*</code><br>效果：<br><em>literal asterisks</em></p><p>Markdown 支持在下面这些符号前面加上反斜线来插入普通的符号：</p><blockquote><p>\ 反斜线<br>` 反引号 </p><ul><li>星号<br>_ 下划线<br>{} 大括号<br>[] 方括号<br>() 括号<br>#井号 </li></ul><ul><li>加号 </li></ul><ul><li>減号<br>. 英文句点<br>! 感叹号</li></ul></blockquote><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>用两个<code>~~</code>把文字包起来。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~我是删除线~~</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>效果：<br><del>我是删除线</del></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><p>使用<code>|</code> 来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。<br><code>name | age</code><br><code>---- | ---</code><br><code>Leslie| 12</code><br><code>Mike | 32</code> </p><p>效果：</p><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>Leslie</td><td>12</td></tr><tr><td>Mike</td><td>32</td></tr></tbody></table><h4 id="指定对齐方式"><a href="#指定对齐方式" class="headerlink" title="指定对齐方式"></a>指定对齐方式</h4><p>在表头下方的分隔线<code>----</code>标记中加入<code>:</code>，即可指定对齐方式。</p><p><code>:---</code>代表左对齐；<br><code>:---:</code> 代表居中对齐；<br><code>---:</code>代表右对齐。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left | center | right </span><br><span class="line">:---:| :----  |------:</span><br><span class="line">| aaaaaaaaa| bbbbbbbbbbbb |ccccccccccccccccccccc |</span><br><span class="line">| a        | b            | c     |</span><br></pre></td></tr></table></figure><p>效果</p><table><thead><tr><th align="center">left</th><th align="left">center</th><th align="right">right</th></tr></thead><tbody><tr><td align="center"></td><td align="left">aaaaaaaaa</td><td align="right">bbbbbbbbbbbb</td></tr><tr><td align="center"></td><td align="left">a</td><td align="right">b</td></tr></tbody></table><p>如果不使用对齐标记，单元格中的内容默认左对齐，表头单元格中的内容默认居中对齐（MarkdownPad就是这样，不同的实现可能会有不同的效果）。</p><h4 id="表格内换行"><a href="#表格内换行" class="headerlink" title="表格内换行"></a>表格内换行</h4><p>可以用<code>&lt;br&gt;</code>表示换行。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name  | Lucky Number</span><br><span class="line">----  | ---</span><br><span class="line">Leslie| <span class="number">2</span>&lt;br&gt;<span class="number">7</span></span><br><span class="line">Mike  | <span class="number">3</span>&lt;br&gt;<span class="number">5</span>&lt;br&gt;<span class="number">8</span></span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>Name</th><th>Lucky Number</th></tr></thead><tbody><tr><td>Leslie</td><td>2<br>7</td></tr><tr><td>Mike</td><td>3<br>5<br>8</td></tr></tbody></table><h4 id="表格内嵌套"><a href="#表格内嵌套" class="headerlink" title="表格内嵌套"></a>表格内嵌套</h4><p>同引用一样，表格的内容也可以使用其他语法，比如公式、引用、行内代码等。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name <span class="string">|  *abcdef*</span></span><br><span class="line">---- <span class="string">|-----</span></span><br><span class="line">Leslie<span class="string">| `int a=18;`</span></span><br><span class="line">Mike <span class="string">|  $\log_28$</span></span><br><span class="line">Ann<span class="string">| &gt;青霄有路终须到，金榜无名誓不归</span></span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>Name</th><th><em>abcdef</em></th></tr></thead><tbody><tr><td>Leslie</td><td><code>int a=18;</code></td></tr><tr><td>Mike</td><td>$\log_28$</td></tr><tr><td>Ann</td><td>&gt;青霄有路终须到，金榜无名誓不归</td></tr></tbody></table><hr><h1 id="内嵌HTML"><a href="#内嵌HTML" class="headerlink" title="内嵌HTML"></a>内嵌HTML</h1><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>Markdown 并无下划线的原生语法，因为会和链接的默认样式产生混淆。如果你非要给文字加个下划线，也有办法。<br>用<code>&lt;u&gt;</code>和<code>&lt;/u&gt;</code>把文字括起来，则有下划线效果。</p><p><code>&lt;u&gt;我有下划线，可是我不是链接&lt;/u&gt;</code><br>效果：</p><p><u>我有下划线，可是我不是链接</u></p><h2 id="字体、字号、颜色"><a href="#字体、字号、颜色" class="headerlink" title="字体、字号、颜色"></a>字体、字号、颜色</h2><p>例1：指定字体<br><code>&lt;font face=&quot;隶书&quot;&gt; 我是隶书 &lt;/font&gt;</code><br>效果：<br><font face="隶书"> 我是隶书 </font></p><p>例2：指定字号<br>size的取值范围：从 1 到 7 ，浏览器默认值是 3。<br><code>&lt;font size=5 &gt; 我的size = 5 &lt;/font&gt; </code><br>效果：<br><font size=5 > 我的size = 5 </font></p><p>例3：指定颜色<br><code>&lt;font color=GreenYellow&gt;我的color=GreenYellow &lt;/font&gt; </code><br>效果：<br><font color=GreenYellow>我的color=GreenYellow </font></p><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现。借助 <code>table</code>，<code>tr</code>， <code>td</code> 等表格标签的 <code>bgcolor</code> 属性来实现背景色功能。</p><p>举例1：<br><code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt; 背景色是橙色 &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code><br>效果：</p><table><tr><td bgcolor=orange> 背景色是橙色 </td></tr></table><p>举例2：<br><code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=green&gt; &lt;font size = 4 color=yellow&gt; Hello World &lt;/font&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code><br>效果：</p><table><tr><td bgcolor=green> <font size = 4 color=yellow> Hello World </font> </td></tr></table><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><p><strong>语法说明：</strong><br>在需要添加注脚的文字后加上脚注名字,称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p><code>  [^注脚名字</code>]</p><p><code> [^注脚名字]:</code></p><h2 id="emoji表情符号"><a href="#emoji表情符号" class="headerlink" title="emoji表情符号"></a>emoji表情符号</h2><p>emoji表情使用:EMOJICODE:的格式，详细列表可见<br><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a></p><p>当然现在很多markdown工具或者网站都不支持。</p><p>语法：</p><p><code>:kissing_smiling_eyes:</code>    </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Markdown-是什么&quot;&gt;&lt;a href=&quot;#Markdown-是什么&quot; class=&quot;headerlink&quot; title=&quot;Markdown 是什么&quot;&gt;&lt;/a&gt;Markdown 是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们&lt;strong&gt;使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）  文档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="page 搭建" scheme="http://diudiu6.com/categories/page-%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Markdown语法" scheme="http://diudiu6.com/categories/page-%E6%90%AD%E5%BB%BA/Markdown%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="Markdown语法" scheme="http://diudiu6.com/tags/Markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Windows虚拟桌面也挺好用</title>
    <link href="http://diudiu6.com/2019/02/03/Windows%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%E4%B9%9F%E6%8C%BA%E5%A5%BD%E7%94%A8/"/>
    <id>http://diudiu6.com/2019/02/03/Windows%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%E4%B9%9F%E6%8C%BA%E5%A5%BD%E7%94%A8/</id>
    <published>2019-02-03T09:02:45.000Z</published>
    <updated>2020-08-26T05:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="「虚拟桌面」能干什么？"><a href="#「虚拟桌面」能干什么？" class="headerlink" title="「虚拟桌面」能干什么？"></a><strong>「虚拟桌面」能干什么？</strong></h2><p><strong>「虚拟桌面」</strong>是一种窗口任务的虚拟分组方式，每个桌面就是一个分组。每创建一个虚拟桌面，就好像重新打开了一个Windows，你能够在一个全新的桌面环境下工作或学习。而之前桌面里打开的软件任务窗口，依然保留在那里，你可以随时切换回原来的桌面。</p><img src="/2019/02/03/Windows%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%E4%B9%9F%E6%8C%BA%E5%A5%BD%E7%94%A8/png_4.png" class=""><p><strong>虚拟桌面的目的在于对不同类型的应用窗口进行分类，使之同时保持前台显示而不致互相干扰。通俗的理解就是：把 N 台显示器塞进同一个显示器里头。</strong></p><p><strong>用途</strong></p><ul><li>以把所有<strong>「开发程序」</strong>的编辑器开在一个虚拟桌面里</li><li>把<strong>「参考网站」</strong>的浏览器开在一个桌面里</li><li>把微信之类的<strong>「聊天应用」</strong>开在另一个桌面里</li></ul><a id="more"></a><h2 id="快捷键入口"><a href="#快捷键入口" class="headerlink" title="快捷键入口"></a><strong>快捷键入口</strong></h2><p><strong>Win 键+Tab</strong>：打开「任务视图」，选择切换/创建 「虚拟桌面」。（很多人至今还在用 Alt + Tab， 虽然 Windows Vista 起就能通过 Win + Tab执行「花哨可视化」任务切换功能）</p><p><strong>Win键+CTRL+D</strong>：创建新的虚拟桌面（几乎没人知道，没人用）。</p><p><strong>Win键+CTRL+F4</strong>：删除当前虚拟桌面（几乎没人知道，没人用）。</p><p><strong>Win键+CTRL+左键</strong>：切换到相邻左侧的虚拟桌面。</p><p><strong>Win键+CTRL+右键</strong>：切换到相邻右侧的虚拟桌面。（这两个快捷键很实用，相当于传说中的 Boss 键了，老板来了，立刻从「放羊」切换到「工作」桌面）</p><h2 id="清洁的任务栏"><a href="#清洁的任务栏" class="headerlink" title="清洁的任务栏"></a><strong>清洁的任务栏</strong></h2><p>窗口多了，任务栏显得拥挤不堪，即便合并了同类应用窗口也难以补救。</p><p>而虚拟桌面让任务栏的程序标签也跟着分门别类，换言之各个虚拟桌面只会显示其前台对应的程序标签，任务栏不会再密密麻麻。</p><h2 id="根据需求来调整"><a href="#根据需求来调整" class="headerlink" title="根据需求来调整"></a>根据需求来调整</h2><p><strong>要用好虚拟桌面，需明确其目的是分类窗口以减少窗口堆砌带来的不便，则窗口的分类自然要依据窗口需求来进行。</strong></p><p>举个例子，日常文字类工作往往需要保持三类应用窗口开启：</p><ul><li>即时通讯类应用（如微信、QQ）</li><li>文字处理类应用（如 Office 全家桶、笔记类应用）</li><li>资料检索类应用（如浏览器、PDF 阅读器）</li></ul><p>比如即时通讯应用放在第一（左边）桌面，资料检索应用放在第三（右边）桌面，这么做符合左右切换桌面的逻辑。</p><img src="/2019/02/03/Windows%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%E4%B9%9F%E6%8C%BA%E5%A5%BD%E7%94%A8/gif_1.gif" class=""><p><strong>窗口拖入虚拟桌面</strong></p><img src="/2019/02/03/Windows%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%E4%B9%9F%E6%8C%BA%E5%A5%BD%E7%94%A8/gif_2.gif" class=""><h1 id="「虚拟桌面」的进阶用法"><a href="#「虚拟桌面」的进阶用法" class="headerlink" title="「虚拟桌面」的进阶用法"></a>「虚拟桌面」的进阶用法</h1><p><strong>鼠标按键切换</strong>：这是一个最得心应手的方案，但需要你有一个拥有可自定义侧边按键的鼠标，在相应的鼠标控制软件中将侧边左键映射到快捷键「Ctrl + Win + ←」，右键反之。</p><img src="/2019/02/03/Windows%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%E4%B9%9F%E6%8C%BA%E5%A5%BD%E7%94%A8/png_7.png" class="">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;「虚拟桌面」能干什么？&quot;&gt;&lt;a href=&quot;#「虚拟桌面」能干什么？&quot; class=&quot;headerlink&quot; title=&quot;「虚拟桌面」能干什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;「虚拟桌面」能干什么？&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;「虚拟桌面」&lt;/strong&gt;是一种窗口任务的虚拟分组方式，每个桌面就是一个分组。每创建一个虚拟桌面，就好像重新打开了一个Windows，你能够在一个全新的桌面环境下工作或学习。而之前桌面里打开的软件任务窗口，依然保留在那里，你可以随时切换回原来的桌面。&lt;/p&gt;
&lt;img src=&quot;/2019/02/03/Windows%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%E4%B9%9F%E6%8C%BA%E5%A5%BD%E7%94%A8/png_4.png&quot; class=&quot;&quot;&gt;




&lt;p&gt;&lt;strong&gt;虚拟桌面的目的在于对不同类型的应用窗口进行分类，使之同时保持前台显示而不致互相干扰。通俗的理解就是：把 N 台显示器塞进同一个显示器里头。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用途&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以把所有&lt;strong&gt;「开发程序」&lt;/strong&gt;的编辑器开在一个虚拟桌面里&lt;/li&gt;
&lt;li&gt;把&lt;strong&gt;「参考网站」&lt;/strong&gt;的浏览器开在一个桌面里&lt;/li&gt;
&lt;li&gt;把微信之类的&lt;strong&gt;「聊天应用」&lt;/strong&gt;开在另一个桌面里&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="使用技巧" scheme="http://diudiu6.com/categories/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Windows" scheme="http://diudiu6.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>函数装饰器和闭包</title>
    <link href="http://diudiu6.com/2019/02/02/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>http://diudiu6.com/2019/02/02/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/</id>
    <published>2019-02-02T02:41:29.000Z</published>
    <updated>2020-08-26T05:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h2><p>函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。这是一项强大的功能，但是若想掌握，必须理解闭包。</p><p>装饰器是可调用的对象，其参数是另一个函数（被装饰的函数）。 装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象。</p><a id="more"></a><p>假如有个名为 decorate 的装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;running inner()&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target</span>():</span></span><br><span class="line">   print(<span class="string">&#x27;running target()&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上述代码的效果与下述写法一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;running inner()&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target</span>():</span></span><br><span class="line">   print(<span class="string">&#x27;running target()&#x27;</span>)</span><br><span class="line">target = decorate(target)```</span><br><span class="line">两种写法的最终结果一样：上述两个代码片段执行完毕后得到的 target 不一定是原来那</span><br><span class="line">个 target 函数，而是 decorate(target) 返回的函数，也就是inner的引用。</span><br><span class="line"></span><br><span class="line">​```Python</span><br><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   func()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>       print(<span class="string">&#x27;running inner()&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="keyword">return</span> inner <span class="comment"># deco 返回 inner 函数对象。</span></span><br><span class="line">&gt;&gt;&gt;@decorate</span><br><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">target</span>():</span> <span class="comment">#  使用 deco 装饰 target。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  print(<span class="string">&#x27;running target()&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;target() <span class="comment">#  调用被装饰的 target 其实会运行 inner。</span></span><br><span class="line">&gt;&gt;&gt;running target()</span><br><span class="line">&gt;&gt;&gt;running inner()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target  <span class="comment">#  审查对象，发现 target 现在是 inner 的引用。</span></span><br><span class="line">&lt;function deco.&lt;locals&gt;.inner at <span class="number">0x10063b598</span>&gt;</span><br></pre></td></tr></table></figure><p>装饰器可以像常规的可调用对象那样调用，其参数是另一个函数。有时，这样做更方便，尤其是做元编程（在运行时改变程序的行为）时。综上，装饰器的一大特性是，能把被装饰的函数替换成其他函数。第二个特性是，装饰器在加载模块时立即执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">registry = []  <span class="comment"># registry 保存被 @register 装饰的函数引用。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">func</span>):</span>  <span class="comment"># register 的参数是一个函数。</span></span><br><span class="line">    print(<span class="string">&#x27;running register(%s)&#x27;</span> % func)  <span class="comment"># 为了演示，显示被装饰的函数。</span></span><br><span class="line">    registry.append(func)  <span class="comment">#把 func 存入 registry。</span></span><br><span class="line">    <span class="keyword">return</span> func  <span class="comment"># 返回 func：必须返回函数；这里返回的函数与通过参数传入的一样。</span></span><br><span class="line"><span class="meta">@register  # f1 和 f2 被 @register 装饰。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;running f1()&#x27;</span>)</span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;running f2()&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span> <span class="comment"># f3 没有装饰。</span></span><br><span class="line">    print(<span class="string">&#x27;running f3()&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span>  <span class="comment"># main 显示 registry，然后调用 f1()、f2() 和 f3()。</span></span><br><span class="line">    print(<span class="string">&#x27;running main()&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;registry -&gt;&#x27;</span>, registry)</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    f3()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()  <span class="comment"># 只有把 registration.py 当作脚本运行时才调用 main()。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ python3 registration.py</span><br><span class="line">running register(&lt;function f1 at <span class="number">0x100631bf8</span>&gt;)</span><br><span class="line">running register(&lt;function f2 at <span class="number">0x100631c80</span>&gt;)</span><br><span class="line">running main()</span><br><span class="line">registry -&gt; [&lt;function f1 at 0x100631bf8&gt;, &lt;function f2 at 0x100631c80&gt;]</span><br><span class="line">running f1()</span><br><span class="line">running f2()</span><br><span class="line">running f3()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> registration</span><br><span class="line">running register(&lt;function f1 at <span class="number">0x10063b1e0</span>&gt;)</span><br><span class="line">running register(&lt;function f2 at <span class="number">0x10063b268</span>&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时查看 registry 的值，得到的输出如下：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registration.registry</span><br><span class="line">[&lt;function f1 at <span class="number">0x10063b1e0</span>&gt;, &lt;function f2 at <span class="number">0x10063b268</span>&gt;]</span><br></pre></td></tr></table></figure><p>上例子主要说明了装饰器的一个关键特性是，它们在被装饰的函数定义之后立即运行这通常是在导入时（即 Python 加载模块时）函数装饰器在导入模块时立即执行，而被装饰的函数只在明确调用时运行。这突出了 Python 程序员所说的导入时和运行时之间的区别。</p><ul><li>装饰器通常在一个模块中定义，然后应用到其他模块中的函数上。</li><li>大多数装饰器会在内部定义一个函数，然后将其返回。</li></ul><p>下面给出三种修饰器的输出，以便思考</p><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">&#x27;running inner()&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> func</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@deco</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">target</span>():</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">&#x27;running target()&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target()</span><br><span class="line">running target()</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;running target()</span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">&#x27;running inner()&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> inner</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@deco</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">target</span>():</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">&#x27;running target()&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target()</span><br><span class="line">running inner()</span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">... </span>    func()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">&#x27;running inner()&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> inner</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@deco</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">target</span>():</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">&#x27;running target()&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">running target()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target()</span><br><span class="line">running inner()</span><br></pre></td></tr></table></figure></li></ol><h2 id="变量作用域规则"><a href="#变量作用域规则" class="headerlink" title="变量作用域规则"></a>变量作用域规则</h2><p>给出三个例子对比</p><p>1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">a</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> f1</span><br><span class="line">NameError: <span class="keyword">global</span> name <span class="string">&#x27;b&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">a</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span>    b = <span class="number">9</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> f2</span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;b&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>在第三个例子中Python 编译函数的定义体时，它判断 b 是局部变量，因为在函数中给它赋值了。生成的字节码证实了这种判断，Python 会尝试从本地环境获取 b。后面调用 f2(3)时， f2 的定义体会获取并打印局部变量 a 的值，但是尝试获取局部变量 b 的值时，发现b 没有绑定值。</p><p>这不是缺陷，而是设计选择：Python 不要求声明变量，但是假定在函数定义体中赋值的变量是局部变量。这比 JavaScript 的行为好多了，JavaScript 也不要求声明变量，但是如果忘记把变量声明为局部变量（使用 var），可能会在不知情的情况下获取全局变量。</p><p>如果在函数中赋值时想让解释器把 b 当成全局变量，要使用 global 声明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">a</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">global</span> b</span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span>    b = <span class="number">9</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>只有涉及嵌套函数时才有闭包问题。<br>闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。</p><p>示例 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">    series = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = sum(series)</span><br><span class="line">        <span class="keyword">return</span> total/len(series)</span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure><p>series 是 make_averager 函数的局部变量，因为那个函数的定义体中初始化了series：series = []。<br>在 averager 函数中，series 是自由变量（free variable）。这是一个技术术语，指未在本地作用域中绑定的变量</p><img src="/2019/02/02/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/png_3.png" class="" title="averager 的闭包延伸到那个函数的作用域之外，包含自由变量 series 的绑定"><p>审查 make_averager（见下例）创建的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span><br><span class="line">(<span class="string">&#x27;new_value&#x27;</span>, <span class="string">&#x27;total&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class="line">(<span class="string">&#x27;series&#x27;</span>,)</span><br></pre></td></tr></table></figure><p>series 的绑定在返回的 avg 函数的 <strong>closure</strong> 属性中。avg.<strong>closure</strong> 中的各个元素对应于 avg.<strong>code</strong>.co_freevars 中的一个名称。这些元素是 cell 对象，有个cell_contents 属性，保存着真正的值。这些属性的值如下例 所示。<br>示例 　接续上例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class="line">(<span class="string">&#x27;series&#x27;</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__</span><br><span class="line">(&lt;cell at <span class="number">0x107a44f78</span>: list object at <span class="number">0x107a91a48</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__[<span class="number">0</span>].cell_contents</span><br><span class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure><p>综上，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用了，但是仍能使用那些绑定。</p><p>只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量。</p><h3 id="nonlocal声明"><a href="#nonlocal声明" class="headerlink" title="nonlocal声明"></a>nonlocal声明</h3><p>错误示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;count&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>对数字、字符串、元组等不可变类型来说，只能读取，不能更新。如果尝试重新绑定，例如 count = count + 1，其实会隐式创建局部变量 count。这样，count 就不是自由变量了，因此不会保存在闭包中。<br>而之前的列表series，我们没有给 series 赋值，我们只是调用series.append，并把它传给 sum 和 len。也就是说，我们利用了列表是可变的对象这一事实。</p><p>为了解决这个问题，Python 3 引入了 nonlocal 声明。<br>它的作用是把变量标记为自由变量，即使在函数中为变量赋予新值了，也会变成自由变量。如果为 nonlocal 声明的变量赋予新值，闭包中保存的绑定会更新。最新版 make_averager 的正确实现如示例 7-14 所示。</p><p>正确示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count, total</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure><p>对于python2中没有nonlocal声明的替代方法<br>把内部函数需要修改的变量（如 count 和 total）存储为可变对象（如字典或简单的实例）的元素或属性，并且把那个对象绑定给一个自由变量。也就是利用可变对象的可变。</p><h3 id="修饰器原理"><a href="#修饰器原理" class="headerlink" title="修饰器原理"></a>修饰器原理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span>(<span class="params">*args</span>):</span>  <span class="comment">#  定义内部函数 clocked，它接受任意个定位参数。</span></span><br><span class="line">        t0 = time.perf_counter()</span><br><span class="line">        result = func(*args)  <span class="comment"># 这行代码可用，是因为 clocked 的闭包中包含自由变量 func。</span></span><br><span class="line">        elapsed = time.perf_counter() - t0</span><br><span class="line">        name = func.__name__</span><br><span class="line">        arg_str = <span class="string">&#x27;, &#x27;</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        print(<span class="string">&#x27;[%0.8fs] %s(%s) -&gt; %r&#x27;</span> % (elapsed, name, arg_str, result))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> clocked <span class="comment"># 返回内部函数，取代被装饰的函数。示例 7-16 演示了 clock 装饰器的用法。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span>(<span class="params">seconds</span>):</span></span><br><span class="line">    time.sleep(seconds)</span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">40</span>, <span class="string">&#x27;Calling snooze(.123)&#x27;</span>)</span><br><span class="line">    snooze(<span class="number">.123</span>)</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">40</span>, <span class="string">&#x27;Calling factorial(6)&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;6! =&#x27;</span>, factorial(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n*factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line">factorial = clock(factorial)</span><br></pre></td></tr></table></figure><p>在修饰器里factorial 会作为 func 参数传给 clock。然后，factorial其实已经成为了clocked的自由变量了，然后 clock 函数会返回 clocked 函数，Python 解释器在背后会把 clocked 赋值给factorial。此时的factorial已经是clocked函数的引用了。而真正的一开始的factorial函数已经是clocked函数的自由变量。从而形成嵌套函数<br>我们可以查看 factorial 的 <strong>name</strong> 属性，<br>会得到如下结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> clockdeco_demo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clockdeco_demo.factorial.__name__</span><br><span class="line"><span class="string">&#x27;clocked&#x27;</span></span><br></pre></td></tr></table></figure><p>所以，现在 factorial 保存的是 clocked 函数的引用。自此之后，每次调用factorial(n)，执行的都是 clocked(n)。<br>clocked 大致做了下面几件事。</p><p>(1) 记录初始时间 t0。<br>(2) 调用原来的 factorial 函数，保存结果。<br>(3) 计算经过的时间。<br>(4) 格式化收集的数据，然后打印出来。<br>(5) 返回第 2 步保存的结果。<br><font color=#0099ff>这是装饰器的典型行为：把被装饰的函数替换成新函数，二者接受相同的参数，而且（通常）返回被装饰的函数本该返回的值，同时还会做些额外操作。</font></p><h3 id="使用functools-lru-cache做备忘"><a href="#使用functools-lru-cache做备忘" class="headerlink" title="使用functools.lru_cache做备忘"></a>使用functools.lru_cache做备忘</h3><p>functools.lru_cache 是非常实用的装饰器，它实现了备忘（memoization）功能。这是一项优化技术，它把耗时的函数的结果保存起来，避免传入相同的参数时重复计算。LRU三个字母是“Least Recently Used”的缩写，表明缓存不会无限制增长，一段时间不用的缓存条目会被扔掉。</p><p>示例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">from</span> clockdeco <span class="keyword">import</span> clock</span><br><span class="line"><span class="meta">@functools.lru_cache() # 注意，必须像常规函数那样调用 lru_cache。这一行中有一对括号：@functools.lru_cache()。这么做的原因是，lru_cache 可以接受配置参数，稍后说明。</span></span><br><span class="line"><span class="meta">@clock  #  这里叠放了装饰器：@lru_cache() 应用到 @clock 返回的函数上。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n<span class="number">-2</span>) + fibonacci(n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(fibonacci(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这样一来，执行时间减半了，而且 n 的每个值只调用一次函数：</span></span><br><span class="line">$ python3 fibo_demo_lru.py</span><br><span class="line">[0.00000119s] fibonacci(0) -&gt; 0</span><br><span class="line">[0.00000119s] fibonacci(1) -&gt; 1</span><br><span class="line">[0.00010800s] fibonacci(2) -&gt; 1</span><br><span class="line">[0.00000787s] fibonacci(3) -&gt; 2</span><br><span class="line">[0.00016093s] fibonacci(4) -&gt; 3</span><br><span class="line">[0.00001216s] fibonacci(5) -&gt; 5</span><br><span class="line">[0.00025296s] fibonacci(6) -&gt; 8</span><br></pre></td></tr></table></figure><p>特别要注意，lru_cache 可以使用两个可选的参数来配置。它的签名是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functools.lru_cache(maxsize=<span class="number">128</span>, typed=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>maxsize 参数指定存储多少个调用的结果。缓存满了之后，旧的结果会被扔掉，腾出空间。为了得到最佳性能，maxsize 应该设为 2 的幂。</p><p>typed 参数如果设为 True，把不同参数类型得到的结果分开保存，即把通常认为相等的浮点数和整数参数（如 1 和 1.0）区分开。</p><p>顺便说一下，因为 lru_cache 使用字典存储结果，而且键根据调用时传入的定位参数和关键字参数创建，所以被 lru_cache 装饰的函数，它的所有参数都必须是可散列的。</p><h3 id="functools-singledispatch-装饰器"><a href="#functools-singledispatch-装饰器" class="headerlink" title="functools.singledispatch 装饰器"></a>functools.singledispatch 装饰器</h3><p>单分派泛函数</p><p>Python 3.4 新增的 functools.singledispatch 装饰器可以把整体方案拆分成多个模块，甚至可以为你无法修改的类提供专门的函数。使用 @singledispatch 装饰的普通函数会变成泛函数（generic function）：根据第一个参数的类型，以不同方式执行相同操作的一组函数。</p><p>这就是单分派。如果根据多个参数选择专门的函数，那就是多分派了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;函数装饰器&quot;&gt;&lt;a href=&quot;#函数装饰器&quot; class=&quot;headerlink&quot; title=&quot;函数装饰器&quot;&gt;&lt;/a&gt;函数装饰器&lt;/h2&gt;&lt;p&gt;函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。这是一项强大的功能，但是若想掌握，必须理解闭包。&lt;/p&gt;
&lt;p&gt;装饰器是可调用的对象，其参数是另一个函数（被装饰的函数）。 装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://diudiu6.com/categories/Python/"/>
    
    <category term="流畅的python" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="第七章" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
    
    
    <category term="流畅的python" scheme="http://diudiu6.com/tags/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>一等函数</title>
    <link href="http://diudiu6.com/2019/02/01/%E4%B8%80%E7%AD%89%E5%87%BD%E6%95%B0/"/>
    <id>http://diudiu6.com/2019/02/01/%E4%B8%80%E7%AD%89%E5%87%BD%E6%95%B0/</id>
    <published>2019-02-01T14:03:30.000Z</published>
    <updated>2019-03-13T11:02:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>“一等对象”定义为满足下述条件的程序实体：<br>在运行时创建<br>能赋值给变量或数据结构中的元素<br>能作为参数传给函数<br>能作为函数的返回结果</p><a id="more"></a><p>sum 和 reduce 的通用思想是把某个操作连续应用到序列的元素上，累计之前的结果，把<br>一系列值归约成一个值。<br>all 和 any 也是内置的归约函数。<br>all(iterable)<br>如果 iterable 的每个元素都是真值，返回 True；all([]) 返回 True。<br>any(iterable)<br>　　只要 iterable 中有元素是真值，就返回 True；any([]) 返回 False。</p><p>匿名函数<br>lambda 关键字在 Python 表达式内创建匿名函数</p><p>与 def 语句一样，lambda 表达式会创建函数对象。这是<br>Python 中几种可调用对象的一种。</p><p>调用运算符（即 ()）可调用对象：</p><p>·用户定义的函数<br>·内置函数<br>　　使用 C 语言（CPython）实现的函数，如 len 或 time.strftime。<br>·内置方法<br>　　使用 C 语言实现的方法，如 dict.get。<br>·类<br>　　调用类时会运行类的 <strong>new</strong> 方法创建一个实例，然后运行 <strong>init</strong> 方法，初始<br>    化实例，最后把实例返回给调用方。调用类相当于调用函数。<br>·类的实例<br>　　如果类定义了 <strong>call</strong> 方法，那么它的实例可以作为函数调用。<br>·生成器函数(比较特殊，详见 14 章。生成器函数还可以作为协程，参见第 16 章。)<br>　　使用 yield 关键字的函数或方法。调用生成器函数返回的是生成器对象。</p><p>callable() 函数   判断对象能否调用</p><p>不仅 Python 函数是真正的对象，任何 Python 对象都可以表现得像函数。<br>为此，只需实现实例方法 __call__。</p><p>实现 <strong>call</strong> 方法的类是创建函数类对象的简便方式</p><p>除了 __doc__，函数对象还有很多属性。使用 dir 函数可以探知 一个对象<br>具有的属性<br>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;__abs__&#x27;</span>, <span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__and__&#x27;</span>, <span class="string">&#x27;__bool__&#x27;</span>, <span class="string">&#x27;__ceil__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__divmod__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__float__&#x27;</span>, <span class="string">&#x27;__floor__&#x27;</span>, <span class="string">&#x27;__floordiv__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__index__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__int__&#x27;</span>, <span class="string">&#x27;__invert__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lshift__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__neg__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__or__&#x27;</span>, <span class="string">&#x27;__pos__&#x27;</span>, <span class="string">&#x27;__pow__&#x27;</span>, <span class="string">&#x27;__radd__&#x27;</span>, <span class="string">&#x27;__rand__&#x27;</span>, <span class="string">&#x27;__rdivmod__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rfloordiv__&#x27;</span>, <span class="string">&#x27;__rlshift__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__ror__&#x27;</span>, <span class="string">&#x27;__round__&#x27;</span>, <span class="string">&#x27;__rpow__&#x27;</span>, <span class="string">&#x27;__rrshift__&#x27;</span>, <span class="string">&#x27;__rshift__&#x27;</span>, <span class="string">&#x27;__rsub__&#x27;</span>, <span class="string">&#x27;__rtruediv__&#x27;</span>, <span class="string">&#x27;__rxor__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__sub__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__truediv__&#x27;</span>, <span class="string">&#x27;__trunc__&#x27;</span>, <span class="string">&#x27;__xor__&#x27;</span>, <span class="string">&#x27;bit_length&#x27;</span>, <span class="string">&#x27;conjugate&#x27;</span>, <span class="string">&#x27;denominator&#x27;</span>, <span class="string">&#x27;from_bytes&#x27;</span>, <span class="string">&#x27;imag&#x27;</span>, <span class="string">&#x27;numerator&#x27;</span>, <span class="string">&#x27;real&#x27;</span>, <span class="string">&#x27;to_bytes&#x27;</span>]</span><br></pre></td></tr></table></figure><p>Python 3 提供了仅限关键字参数（keyword-only argument）<br>调用函数时使用 * 和** “展开” 可迭代对象，映射到单个参数。</p><p>*args<br>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装<br>为一个tuple。</p><p>用法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="comment">#笨方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(nums[<span class="number">0</span>], nums[<span class="number">1</span>], nums[<span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#聪明方法,可以在list或tuple前面加一个*号，把list或tuple的元素变成</span></span><br><span class="line"><span class="comment">#可变参数传进去</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">14</span></span><br></pre></td></tr></table></figure><p>**kwargs<br>关键字参数允许你传入0个或任意个含参数名的参数，这些<br>关键字参数在函数内部自动组装为一个dict</p><p>用法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="comment">#笨方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#聪明方法 </span></span><br><span class="line"><span class="comment">#用**extra表示把extra这个dict的所有key-value用关键字参数</span></span><br><span class="line"><span class="comment">#传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的</span></span><br><span class="line"><span class="comment">#一份拷贝，对kw的改动不会影响到函数外的extra</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>仅限关键词参数  KEYWORD_ONLY</p><p>和关键字参数*kw不同，仅限关键词参数需要一个特殊分隔符，<br>*后面的参数被视为仅限关键词参数。</p><p>用法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city, job</span>):</span></span><br><span class="line">    print(name, age, city, job)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=<span class="string">&#x27;Beijing&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure><p>如果函数定义中已经有了一个可变参数，后面跟着的仅限关键词参数就<br>不再需要一个特殊分隔符*了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *args, city, job</span>):</span></span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure><p>仅限关键词参数必须传入参数名，这和位置参数不同。如果没有传入参数名，<br>调用将报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Traceback (most recent call last):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>TypeError: person() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>由于调用时缺少参数名city和job，Python解释器把这<span class="number">4</span>个参数均视为位置参数，</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>但person()函数仅接受<span class="number">2</span>个位置参数。</span><br></pre></td></tr></table></figure><p>使用仅限关键词参数时，要特别注意，如果没有可变参数，就必须加一个作为特殊分隔符。<br>如果缺少，Python解释器将无法识别位置参数和仅限关键词参数：</p><p>仅限关键词参数不一定要有默认值，但此时强制必须传入实参。</p><p>Python 中函数的参数可以分为两大类：</p><p>定位参数（Positional）：表示参数的位置是固定的。<br>比如对于函数 foo(a, b) 来说，foo(1, 2) 和 foo(2, 1) 就是截然不同的，<br>a 和 b 的位置是固定的，不可随意调换。<br>关键词参数（Keyword）：表示参数的位置不重要，但是参数名称很重要。<br>比如 foo(a = 1, b = 2) 和 foo(b = 2, a = 1) 的含义相同。</p><p>def foo(<em>args, n=1, **kwargs):<br>    print(n)<br>这个函数在调用时，如果参数 n 不指定名字，就会被前面的 *args 处理掉，<br>如果指定的名字不是 n，又会被后面的 *</em>kwargs 处理掉，<br>所以参数 n 必须精确的以 (n = xxx) 的形式出现，也就是 KEYWORD_ONLY。</p><p>函数对象有个 <strong>defaults</strong> 属性，它的值是一个元组，里面保存着定位参数和关键字<br>参数的默认值。仅限关键字参数的默认值在 <strong>kwdefaults</strong> 属性中。然而，参数的名<br>称在 <strong>code</strong> 属性中，它的值是一个 code 对象引用，自身也有很多属性。</p><p>#text 定位参数    max_len 关键词参数  a 仅限关键词参数 如果a没有默认值，clip初始化时需要传入a</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span>(<span class="params">text, max_len=<span class="number">80</span>,*,a</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;在max_len前面或后面的第一个空格处截断文本</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    end = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> len(text) &gt; max_len:</span><br><span class="line">        space_before = text.rfind(<span class="string">&#x27; &#x27;</span>, <span class="number">0</span>, max_len)</span><br><span class="line">        <span class="keyword">if</span> space_before &gt;= <span class="number">0</span>:</span><br><span class="line">            end = space_before</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            space_after = text.rfind(<span class="string">&#x27; &#x27;</span>, max_len)</span><br><span class="line">        <span class="keyword">if</span> space_after &gt;= <span class="number">0</span>:</span><br><span class="line">            end = space_after</span><br><span class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 没找到空格</span></span><br><span class="line">        end = len(text)</span><br><span class="line">    <span class="keyword">return</span> text[:end].rstrip()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__defaults__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">80</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__  <span class="comment"># doctest: +ELLIPSIS</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;code object clip at <span class="number">0</span>x...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__.co_varnames</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;max_len&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;space_before&#x27;</span>, <span class="string">&#x27;space_after&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__code__.co_argcount</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>提取函数的签名<br>inspect.signature 函数返回一个 inspect.Signature 对象，它有一<br>个 parameters 属性，这是一个有序映射，把参数名和 inspect.Parameter 对象对应起<br>来。各个 Parameter 属性也有自己的属性，例如 name、default 和 kind。特殊的<br>inspect._empty 值表示没有默认值，注意 None 是有效的默认值不会显示inspect._empty（也经常这么做），<br>而且这么做是合理的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig = signature(clip)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig  <span class="comment"># doctest: +ELLIPSIS</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;inspect.Signature object at <span class="number">0</span>x...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(sig)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;(text, max_len=80)&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, param <span class="keyword">in</span> sig.parameters.items():</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>        print(param.kind, <span class="string">&#x27;:&#x27;</span>, param.name, <span class="string">&#x27;=&#x27;</span>, param.default)</span><br><span class="line"></span><br><span class="line">POSITIONAL_OR_KEYWORD : text = &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">inspect</span>.<span class="title">_empty</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">POSITIONAL_OR_KEYWORD</span> :</span> max_len = <span class="number">80</span></span><br></pre></td></tr></table></figure><p>注解<br>inspect.Parameter 对象还有一个 annotation（注解）属性</p><p>函数声明中的各个参数可以在 : 之后增加注解表达式。如果参数有默认值，注解放在参<br>数名和 = 号之间。如果想注解返回值，在 ) 和函数声明末尾的 : 之间添加 -&gt; 和一个表达<br>式。那个表达式可以是任何类型。注解中最常用的类型是类（如 str 或 int）和字符串<br>（如 ‘int &gt; 0’）。在示例 5-19 中，max_len 参数的注解用的是字符串。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span>(<span class="params">text:str, max_len:<span class="string">&#x27;int &gt; 0&#x27;</span>=<span class="number">80</span></span>) -&gt; str:</span> </span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"> clip.__annotations__</span><br><span class="line">&#123;&#x27;text&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;max_len&#x27;: &#x27;int &gt; 0&#x27;, &#x27;return&#x27;: &lt;class &#x27;str&#x27;&gt;&#125;</span><br></pre></td></tr></table></figure><p>Python 对注解所做的唯一的事情是，把它们存储在函数的 <strong>annotations</strong> 属性里。仅<br>此而已，Python 不做检查、不做强制、不做验证，什么操作都不做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig = signature(clip)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig.return_annotation</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">for</span> <span class="title">param</span> <span class="title">in</span> <span class="title">sig</span>.<span class="title">parameters</span>.<span class="title">values</span>():</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     note = repr(param.annotation).ljust(<span class="number">13</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     print(note, <span class="string">&#x27;:&#x27;</span>, param.name, <span class="string">&#x27;=&#x27;</span>, param.default)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt; :</span> text = &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">inspect</span>.<span class="title">_empty</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#x27;<span class="title">int</span> &gt; 0&#x27;     :</span> max_len = <span class="number">80</span></span><br></pre></td></tr></table></figure><p>operator 模块</p><p>使用 reduce 函数和一个匿名函数计算阶乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a, b: a*b, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">使用 reduce 和 operator.mul 函数计算阶乘</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(mul, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> metro_data = [</span><br><span class="line"><span class="meta">... </span>    (<span class="string">&#x27;Tokyo&#x27;</span>, <span class="string">&#x27;JP&#x27;</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>)),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">&#x27;Delhi NCR&#x27;</span>, <span class="string">&#x27;IN&#x27;</span>, <span class="number">21.935</span>, (<span class="number">28.613889</span>, <span class="number">77.208889</span>)),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">&#x27;Mexico City&#x27;</span>, <span class="string">&#x27;MX&#x27;</span>, <span class="number">20.142</span>, (<span class="number">19.433333</span>, <span class="number">-99.133333</span>)),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">&#x27;New York-Newark&#x27;</span>, <span class="string">&#x27;US&#x27;</span>, <span class="number">20.104</span>, (<span class="number">40.808611</span>, <span class="number">-74.020386</span>)),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">&#x27;Sao Paulo&#x27;</span>, <span class="string">&#x27;BR&#x27;</span>, <span class="number">19.649</span>, (<span class="number">-23.547778</span>, <span class="number">-46.635833</span>)),</span><br><span class="line"><span class="meta">... </span>]</span><br></pre></td></tr></table></figure><p>itemgetter(1) 的作用与 lambda fields: fields[1] 一样：创建一个接受集合<br>的函数，返回索引位 1 上的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">for</span> city <span class="keyword">in</span> sorted(metro_data, key=itemgetter(<span class="number">1</span>)):</span><br><span class="line"><span class="meta">... </span>    print(city)</span><br><span class="line">...</span><br><span class="line">(<span class="string">&#x27;Sao Paulo&#x27;</span>, <span class="string">&#x27;BR&#x27;</span>, <span class="number">19.649</span>, (<span class="number">-23.547778</span>, <span class="number">-46.635833</span>))</span><br><span class="line">(<span class="string">&#x27;Delhi NCR&#x27;</span>, <span class="string">&#x27;IN&#x27;</span>, <span class="number">21.935</span>, (<span class="number">28.613889</span>, <span class="number">77.208889</span>))</span><br><span class="line">(<span class="string">&#x27;Tokyo&#x27;</span>, <span class="string">&#x27;JP&#x27;</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</span><br><span class="line">(<span class="string">&#x27;Mexico City&#x27;</span>, <span class="string">&#x27;MX&#x27;</span>, <span class="number">20.142</span>, (<span class="number">19.433333</span>, <span class="number">-99.133333</span>))</span><br><span class="line">(<span class="string">&#x27;New York-Newark&#x27;</span>, <span class="string">&#x27;US&#x27;</span>, <span class="number">20.104</span>, (<span class="number">40.808611</span>, <span class="number">-74.020386</span>))</span><br></pre></td></tr></table></figure><p>如果把多个参数传给 itemgetter，它构建的函数会返回提取的值构成的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc_name = itemgetter(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> city <span class="keyword">in</span> metro_data:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     print(cc_name(city))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;JP&#x27;</span>, <span class="string">&#x27;Tokyo&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;IN&#x27;</span>, <span class="string">&#x27;Delhi NCR&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;MX&#x27;</span>, <span class="string">&#x27;Mexico City&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;US&#x27;</span>, <span class="string">&#x27;New York-Newark&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;BR&#x27;</span>, <span class="string">&#x27;Sao Paulo&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;“一等对象”定义为满足下述条件的程序实体：&lt;br&gt;在运行时创建&lt;br&gt;能赋值给变量或数据结构中的元素&lt;br&gt;能作为参数传给函数&lt;br&gt;能作为函数的返回结果&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://diudiu6.com/categories/Python/"/>
    
    <category term="流畅的python" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="第五章" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    
    
    <category term="流畅的python" scheme="http://diudiu6.com/tags/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>使用一等函数设计模式</title>
    <link href="http://diudiu6.com/2019/02/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%AD%89%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://diudiu6.com/2019/02/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%AD%89%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-02-01T11:12:52.000Z</published>
    <updated>2020-08-26T05:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/02/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%AD%89%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/png_1.png" class=""><a id="more"></a><p>《设计模式：可复用面向对象软件的基础》一书的作者指出：“策略对象通常是很好的享元（flyweight）。”  “享元”定义：“享元是可共享的对象，可以同时在多个上下文中使用。”   共享是推荐的做法，这样不必在每个新的上下文中使用相同的策略时不断新建具体策略对象，从而减少消耗。因此，为了避免“策略”模式的一个缺点（运行时消耗）</p><p>具体策略一般没有内部状态，只是处理上下文中的数据。此时，一定要使用普通的函数，别去编写只有一个方法的类，再去实现另一个类声明的单函数接口。函数比用户定义的类的实例轻量，而且无需使用“享元”模式，因为各个策略函数在 Python 编译模块时只会创建一次。<font color=#0099ff>普通的函数也是“可共享的对象，可以同时在多个上下文中使用”。</font></p><p>globals()<br>返回一个字典，表示当前的全局符号表。这个符号表始终针对当前模块（对函数或方<br>法来说，是指定义它们的模块，而不是调用它们的模块）。</p><img src="/2019/02/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%AD%89%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/png_2.png" class="" title="命令模式"><p>“命令”模式的目的是<font color=#0099ff>解耦调用操作的对象（调用者）和提供实现的对象（接收者）。</font>调用者是图形应用程序中的菜单项，而接收者是被编辑的文档或应用程序自身。</p><p>inspect.getmembers 函数用于获取对象（这里是 promotions模块）的属性，第二个参数是可选的判断条件（一个布尔值函数）。我们使用的是 inspect.isfunction，只获取模块中的函数。</p><p>把实现单方法接口的类的实例替换成可调用对象。毕竟，每个Python 可调用对象都实现了单方法接口，这个方法就是 __call__。</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2019/02/01/%E4%BD%BF%E7%94%A8%E4%B8%80%E7%AD%89%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/png_1.png&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    <category term="Python" scheme="http://diudiu6.com/categories/Python/"/>
    
    <category term="流畅的python" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="第六章" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    
    
    <category term="流畅的python" scheme="http://diudiu6.com/tags/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>文本和字节序列</title>
    <link href="http://diudiu6.com/2019/01/31/%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E8%8A%82%E5%BA%8F%E5%88%97/"/>
    <id>http://diudiu6.com/2019/01/31/%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E8%8A%82%E5%BA%8F%E5%88%97/</id>
    <published>2019-01-31T13:59:31.000Z</published>
    <updated>2019-03-13T11:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个字符串是一个字符序列。字符是Unicode字符<br>字符的标识是码位。<br>字符的具体表述取决于所用的编码。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;cafe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = s.encode(<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment">#使用UTF-8把str对象编码成bytes对象  把码位转换成字节序列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = b.decode(<span class="string">&#x27;utf8&#x27;</span>)  <span class="comment">#使用UTF-8把bytes对象解码成str对象  把字节序列转换成码位</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;cafe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;cafe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;cafe&#x27;</span></span><br></pre></td></tr></table></figure><p>bytes 字面量以b开头<br>python3里的 str 类型相当于python2 里的 Unicode类型</p><p>bytes 或 bytearry 对象的各个元素是介于0-255（含）之间的整数<br>bytes 的切片仍然是 bytes 对象<br>my_bytes[0] == my_bytes[:1]<br>书本P85</p><p>re模块中的正则表达式也能处理二进制序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a =<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Traceback (most recent call last):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>NameError: name <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>del 释放内存</p><p>memory views<br>docs.python.org/3/library/stdtypes.html#memory-views<br>struct<br>docs.python.org/3/library/struct.html</p><p>UnicodeEncodeError 把字符串转换成二进制序列时的问题<br>UnicodeDecodeError 把二进制序列转换成字符串时的问题<br>SyntaxError        如果源码的编码与预期不符，加载python模块时的问题</p><p>s.encode(‘utf8’,errors = ‘ignore’)  把无法编码的字符跳过<br>s.encode(‘utf8’,errors = ‘replace’) 把无法编码的字符代替为 ‘?’<br>s.encode(‘utf8’,errors = ‘xmlcharrefreplace’)  把无法编码的字符替换成XML实体</p><p>处理文本的最佳实践是“Unicode 三明治”。<br>要尽早把输入（例如读取文件时）的字节序列解码成字符串。这种三明治中的“肉片”<br>是程序的业务逻辑，在这里只能处理字符串对象。在其他处理过程中，一定不能编码或解码。<br>对输出来说，则要尽量晚地把字符串编码成字节序列。</p><p>python3内置的 open 函数会在读取文件时做必要的解码，以文本模式写入文件时还会做<br>必要的编码，所以调用 my_file.read()方法得到的以及传给 my_file.write(text)<br>方法的都是字符串对象<br>如果依赖默认编码，会遇到麻烦。<br>系统默认的编码（Windows 1252）</p><p>需要在多台设备中或多种场合下运行的代码，一定不能依赖默认编码。打开文<br>件时始终应该明确传入 encoding= 参数，因为不同的设备使用的默认编码可能不<br>同，有时隔一天也会发生变化。</p><p>如果打开文件是为了写入，但是没有指定编码参数，会使用区域设置中的默认编码，而且<br>使用那个编码也能正确读取文件。但是，如果脚本要生成文件，而字节的内容取决于平台<br>或同一平台中的区域设置，那么就可能导致兼容问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp = open(<span class="string">&#x27;cafe.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf_8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp  <span class="comment"># 默认情况下，open 函数采用文本模式，返回一个 TextIOWrapper 对象。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;_io.TextIOWrapper name=<span class="string">&#x27;cafe.txt&#x27;</span> mode=<span class="string">&#x27;w&#x27;</span> encoding=<span class="string">&#x27;utf_8&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp.write(<span class="string">&#x27;café&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>  <span class="comment"># 在 TextIOWrapper 对象上调用 write 方法返回写入的 Unicode 字符数。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.stat(<span class="string">&#x27;cafe.txt&#x27;</span>).st_size</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>  <span class="comment"># os.stat 报告文件中有 5 个字节；UTF-8 编码的 &#x27;é&#x27; 占两个字节，0xc3 和 0xa9。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp2 = open(<span class="string">&#x27;cafe.txt&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp2  <span class="comment"># 打开文本文件时没有显式指定编码，返回一个 TextIOWrapper 对象，编码是区域设置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#中的默认值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;_io.TextIOWrapper name=<span class="string">&#x27;cafe.txt&#x27;</span> mode=<span class="string">&#x27;r&#x27;</span> encoding=<span class="string">&#x27;cp1252&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp2.encoding <span class="comment">#TextIOWrapper 对象有个 encoding 属性；查看它，发现这里的编码是 cp1252。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;cp1252&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp2.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;cafÃ©&#x27;</span>  <span class="comment"># 在 Windows cp1252 编码中，0xc3 字节是“Ã”（带波形符的 A），0xa9 字节是版权符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>号。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp3 = open(<span class="string">&#x27;cafe.txt&#x27;</span>, encoding=<span class="string">&#x27;utf_8&#x27;</span>)  <span class="comment"># 使用正确的编码打开那个文件。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;_io.TextIOWrapper name=<span class="string">&#x27;cafe.txt&#x27;</span> mode=<span class="string">&#x27;r&#x27;</span> encoding=<span class="string">&#x27;utf_8&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp3.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;café&#x27;</span>  <span class="comment">#结果符合预期：得到的是四个 Unicode 字符 &#x27;café&#x27;。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp4 = open(<span class="string">&#x27;cafe.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)  <span class="comment"># &#x27;rb&#x27; 标志指明在二进制模式中读取文件。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp4</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;_io.BufferedReader name=<span class="string">&#x27;cafe.txt&#x27;</span>&gt;  <span class="comment"># 返回的是 BufferedReader 对象，而不是 TextIOWrapper 对象。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp4.read()  <span class="comment">#读取返回的字节序列，结果与预期相符。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;caf\xc3\xa9&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">locale.getpreferredencoding() -&gt; &#x27;cp936&#x27;# locale.getpreferredencoding() 是最重要的设置。</span><br><span class="line">                 type(my_file) -&gt; &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span><br><span class="line">              my_file.encoding -&gt; &#x27;cp936&#x27;# 文本文件默认使用 locale.getpreferredencoding()。</span><br><span class="line">           sys.stdout.isatty() -&gt; True# 输出到控制台中，因此 sys.stdout.isatty() 返回 True。</span><br><span class="line">           sys.stdout.encoding -&gt; &#x27;utf-8&#x27;# 因此，sys.stdout.encoding 与控制台的编码相同。</span><br><span class="line">            sys.stdin.isatty() -&gt; True</span><br><span class="line">            sys.stdin.encoding -&gt; &#x27;utf-8&#x27;</span><br><span class="line">           sys.stderr.isatty() -&gt; True</span><br><span class="line">           sys.stderr.encoding -&gt; &#x27;utf-8&#x27;</span><br><span class="line">      sys.getdefaultencoding() -&gt; &#x27;utf-8&#x27;</span><br><span class="line">   sys.getfilesystemencoding() -&gt; &#x27;utf-8&#x27;</span><br></pre></td></tr></table></figure><p>关于编码默认值的最佳建议是：别依赖默认值。</p><p>使用 unicodedata.normalize 函数提供的 Unicode 规范化。这个<br>函数的第一个参数是这 4 个字符串中的一个：’NFC’、’NFD’、’NFKC’ 和 ‘NFKD’。<br>NFC（Normalization Form C）使用最少的码位构成等价的字符串<br>NFD 把组合字符分解成基字符和单独的组合字符。</p><p>西方键盘通常能输出组合字符，因此用户输入的文本默认是 NFC 形式。不过，安全起<br>见，保存文本之前，最好使用 normalize(‘NFC’, user_text) 清洗字符串。</p><p>使用 NFC 时，有些单字符会被规范成另一个单字符。这两个字符在视觉上是一样的，<br>但是比较时并不相等，因整理此要规范化，防止出现意外</p><p>另外两个规范化形式（NFKC 和 NFKD）的首字母缩略词中，字母 K 表<br>示“compatibility”（兼容性）。这两种是较严格的规范化形式，对“兼容字符”有影响。<br>在 NFKC 和 NFKD 形式中，各个兼容字符会被替换成一个或多个“兼容分解”字符，即便<br>这样有些格式损失，但仍是“首选”表述——理想情况下，格式化是外部标记的职责，不应<br>该由 Unicode 处理。下面举个例子。二分之一 ‘½’（U+00BD）经过兼容分解后得到的是<br>三个字符序列 ‘1/2’；微符号 ‘µ’（U+00B5）经过兼容分解后得到的是小写字母<br>‘μ’（U+03BC）。</p><p>str.casefold() 大小写折叠——把所有文本变成小写<br>str.casefold() 和 str.lower() 得到不同结果的有 116 个码位。</p><p>对于只包含 latin1 字符的字符串 s，s.casefold() 得到的结果与 s.lower() 一样，唯<br>有两个例外：微符号 ‘µ’ 会变成小写的希腊字母“μ”（在多数字体中二者看起来一样）；<br>德语 Eszett（“sharp s”，ß）会变成“ss”。</p><p>re.compile(r’\d+’)  字符串类型<br>re.compile(rb’\d+’) 字节类型<br>字符串正则表达式有个 re.ASCII 标志，它让 \w、\W、\b、\B、\d、\D、\s<br> 和 \S 只匹配 ASCII 字符。<br>re模块 <a href="https://docs.python.org/3/library/re.html">https://docs.python.org/3/library/re.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re_numbers_str = re.compile(<span class="string">r&#x27;\d+&#x27;</span>)     ➊</span><br><span class="line">re_words_str = re.compile(<span class="string">r&#x27;\w+&#x27;</span>)</span><br><span class="line">re_numbers_bytes = re.compile(r<span class="string">b&#x27;\d+&#x27;</span>)  ➋</span><br><span class="line">re_words_bytes = re.compile(r<span class="string">b&#x27;\w+&#x27;</span>)</span><br><span class="line">text_str = (<span class="string">&quot;Ramanujan saw \u0be7\u0bed\u0be8\u0bef&quot;</span>  ➌</span><br><span class="line">            <span class="string">&quot; as 1729 = 1³ + 12³ = 9³ + 10³.&quot;</span>)        ➍</span><br><span class="line">text_bytes = text_str.encode(<span class="string">&#x27;utf_8&#x27;</span>)  ➎</span><br><span class="line">print(<span class="string">&#x27;Text&#x27;</span>, repr(text_str), sep=<span class="string">&#x27;\n  &#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;Numbers&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;  str  :&#x27;</span>, re_numbers_str.findall(text_str))      ➏</span><br><span class="line">print(<span class="string">&#x27;  bytes:&#x27;</span>, re_numbers_bytes.findall(text_bytes))  ➐</span><br><span class="line">print(<span class="string">&#x27;Words&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;  str  :&#x27;</span>, re_words_str.findall(text_str))        ➑</span><br><span class="line">print(<span class="string">&#x27;  bytes:&#x27;</span>, re_words_bytes.findall(text_bytes))    ➒</span><br></pre></td></tr></table></figure><ol><li>前两个正则表达式是字符串类型。</li><li>后两个正则表达式是字节序列类型。</li><li>要搜索的 Unicode 文本，包括 1729 的泰米尔数字（逻辑行直到右括号才结束）。</li><li>这个字符串在编译时与前一个拼接起来（参见 Python 语言参考手册中的“2.4.2. String<br> literal concatenation”，<a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-">https://docs.python.org/3/reference/lexical_analysis.html#string-literal-</a><br> concatenation）。</li><li>字节序列只能用字节序列正则表达式搜索。</li><li>字符串模式 r’\d+’ 能匹配泰米尔数字和 ASCII 数字。</li><li>字节序列模式 rb’\d+’ 只能匹配 ASCII 字节中的数字。</li><li>字符串模式 r’\w+’ 能匹配字母、上标、泰米尔数字和 ASCII 数字。</li><li>字节序列模式 rb’\w+’ 只能匹配 ASCII 字节中的字母和数字。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个字符串是一个字符序列。字符是Unicode字符&lt;br&gt;字符的标识是码位。&lt;br&gt;字符的具体表述取决于所用的编码。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://diudiu6.com/categories/Python/"/>
    
    <category term="流畅的python" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="第四章" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    
    
    <category term="流畅的python" scheme="http://diudiu6.com/tags/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>字典和集合</title>
    <link href="http://diudiu6.com/2019/01/30/%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://diudiu6.com/2019/01/30/%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/</id>
    <published>2019-01-30T13:59:31.000Z</published>
    <updated>2019-03-13T11:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>语法：isinstance（object，type）<br>作用：来判断一个对象是否是一个已知的类型。</p><p>其第一个参数（object）为对象，第二个参数（type）为类型名(int…)或<br>类型名的一个列表((int,list,float)是一个列表。其返回值为布尔型（True or flase）。</p><p>若对象的类型与参数二的类型相同则返回True。若参数二为一个元组，<br>则若对象类型与元组中类型名之一相同即返回True。</p><p>散列类型的定义  <a href="https://docs.python.org/3/glossary.html#term-hashable">https://docs.python.org/3/glossary.html#term-hashable</a><br>如果一个对象是可散列（可哈希）的，那么在这个对象的生命周期里，他的散列值（哈希值）<br>是不变的，而且这个对象需要实现 <strong>hash</strong>() 方法，另外可散列对象还要有 <strong>eq</strong>()方法，<br>这样才能跟其他键作比较。如果两个可散列对象是相等的，那么他们的散列值一定是一样的。<br>原子不可变数据类型（str， bytes 和数据类型）都是可散列类型，frozenset 也是。元组的话，<br>需要一个元组内所有的元素都是可散列类型，他才是可散列类型。</p><p>散列值是它们的 id() 函数的返回值</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1863412880</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hash(a)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>dict  字典  <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict">https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</a><br>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。<br>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。</p><p>创建字典的多种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125; <span class="comment">#one为键，1为值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = dict(zip([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict([(<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;three&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = dict(&#123;<span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b == c == d == e</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>字典推导（dictcomp）<br>可以从任何以键值对作为元素的可迭代对象中构建出字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>di =[(<span class="string">&#x27;dfsgs&#x27;</span>,<span class="number">41</span>),</span><br><span class="line"><span class="meta">... </span>(<span class="string">&#x27;wefcwe&#x27;</span>,<span class="number">12</span>)</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cou=&#123;co:code <span class="keyword">for</span> code, co <span class="keyword">in</span> di&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cou</span><br><span class="line">&#123;<span class="number">41</span>: <span class="string">&#x27;dfsgs&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;wefcwe&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>dict.setdefault(k,[default])   若字典里有键k，则直接返回k所对应的值；若无，<br>则让dict[k]=default,然后返回default.</p><p>我们可以自己继承字典然后实现 <strong>missing</strong>()，这样也能使得该字典在dict[key]<br>（即调用 <strong>getiem</strong>()时）实现该功能<br>collection.defaultdict也有此功能(也是靠<strong>missing</strong>()实现的)<br>index = collection.defaultdict(list)<br>index[key]    如果key不存在index的键，则调用list()建立一个新列表，吧这个新列表作为值，<br>key作为键放到index中，然后返回这个列表的引用<br>书本P62</p><p><a href="http://www.pingo.io/docs/">http://www.pingo.io/docs/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pingo</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">board = pingo.detect.MyBoard()</span><br><span class="line">led_pin = board.pins[<span class="number">13</span>]</span><br><span class="line">led_pin.mode = pingo.OUT</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    led_pin.hi()</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    led_pin.lo()</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict0</span>(<span class="params">dict</span>):</span>  <span class="comment"># &lt;1&gt;继承了dict</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):  <span class="comment"># &lt;2&gt;如果找不到的键本身就是字符串，报错</span></span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[str(key)]  <span class="comment"># &lt;3&gt;如果找不到的键不是字符串就把他转化成字符串再查找，self[str(key)]找不到会再次进入__missing__里</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, key, default=None</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]  <span class="comment"># &lt;4&gt;get方法吧查找工作用self[key]的形式委托给__getitem__,这样在宣布查找失败之前还能通过__missing__再给这个键一次机会</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">return</span> default  <span class="comment"># &lt;5&gt;如果跑出error说明__missing__也失败了，返回default</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> str(key) <span class="keyword">in</span> self.keys()  <span class="comment"># &lt;6&gt;如果用 key in my_dict会无限递归</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict</span>(<span class="params">collections.UserDict</span>):</span>  <span class="comment"># &lt;1&gt;对UserDict的扩展</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span>(<span class="params">self, key</span>):</span>  <span class="comment"># &lt;2&gt; # &lt;2&gt;如果找不到的键本身就是字符串，报错</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[str(key)]  <span class="comment"># &lt;3&gt;如果找不到的键不是字符串就把他转化成字符串再查找，self[str(key)]找不到会再次进入__missing__里</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> str(key) <span class="keyword">in</span> self.data  <span class="comment"># &lt;3&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, key, item</span>):</span></span><br><span class="line">        self.data[str(key)] = item   <span class="comment"># &lt;4&gt;</span></span><br></pre></td></tr></table></figure><p>集合推导</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;语法：isinstance（object，type）&lt;br&gt;作用：来判断一个对象是否是一个已知的类型。&lt;/p&gt;
&lt;p&gt;其第一个参数（object）为对象，第二个参数（type）为类型名(int…)或&lt;br&gt;类型名的一个列表((int,list,float)是一个列表。其返回值为布尔型（True or flase）。&lt;/p&gt;
&lt;p&gt;若对象的类型与参数二的类型相同则返回True。若参数二为一个元组，&lt;br&gt;则若对象类型与元组中类型名之一相同即返回True。&lt;/p&gt;
&lt;p&gt;散列类型的定义  &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-hashable&quot;&gt;https://docs.python.org/3/glossary.html#term-hashable&lt;/a&gt;&lt;br&gt;如果一个对象是可散列（可哈希）的，那么在这个对象的生命周期里，他的散列值（哈希值）&lt;br&gt;是不变的，而且这个对象需要实现 &lt;strong&gt;hash&lt;/strong&gt;() 方法，另外可散列对象还要有 &lt;strong&gt;eq&lt;/strong&gt;()方法，&lt;br&gt;这样才能跟其他键作比较。如果两个可散列对象是相等的，那么他们的散列值一定是一样的。&lt;br&gt;原子不可变数据类型（str， bytes 和数据类型）都是可散列类型，frozenset 也是。元组的话，&lt;br&gt;需要一个元组内所有的元素都是可散列类型，他才是可散列类型。&lt;/p&gt;
&lt;p&gt;散列值是它们的 id() 函数的返回值&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://diudiu6.com/categories/Python/"/>
    
    <category term="流畅的python" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="第三章" scheme="http://diudiu6.com/categories/Python/%E6%B5%81%E7%95%85%E7%9A%84python/%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    
    
    <category term="流畅的python" scheme="http://diudiu6.com/tags/%E6%B5%81%E7%95%85%E7%9A%84python/"/>
    
    <category term="learning" scheme="http://diudiu6.com/tags/learning/"/>
    
  </entry>
  
</feed>
